// Generated by Oxidefier

#![allow(mixed_script_confusables)]
#![allow(non_snake_case)]
#![allow(uncommon_codepoints)]
#![allow(unused_assignments)]
#![allow(unused_variables)]

use alloy_primitives::U256;
use evm_opcodes::*;

pub mod exp_unit_test {
    use alloy_primitives::U256;
    use evm_opcodes::*;

    pub fn allocate_unbounded<CI>(context: &mut Context<CI>) -> YulOutput<U256>
    where
        Context<CI>: ContractInteractions,
    {
        let mut memPtr = U256::ZERO;
        memPtr = mload(U256::from(0x40u128), context)?;
        Ok(memPtr)
    }

    pub fn revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb<CI>(context: &mut Context<CI>) -> YulOutput<()>
    where
        Context<CI>: ContractInteractions,
    {
        revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
        Ok(())
    }

    pub fn body<CI>(context: &mut Context<CI>) -> YulOutput<()>
    where
        Context<CI>: ContractInteractions,
    {
        mstore(U256::from(0x40u128), memoryguard(U256::from(0x80u128), context)?, context)?;
        if callvalue(context)? != U256::ZERO {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
        }
        let _1 = allocate_unbounded(context)?;
        codecopy(_1, dataoffset(from_hex("4578705f556e69745f546573745f3236395f6465706c6f796564000000000000"), context)?, datasize(from_hex("4578705f556e69745f546573745f3236395f6465706c6f796564000000000000"), context)?, context)?;
        return_(_1, datasize(from_hex("4578705f556e69745f546573745f3236395f6465706c6f796564000000000000"), context)?, context)?;
        Ok(())
    }

    pub mod exp_unit_test_deployed {
        use alloy_primitives::U256;
        use evm_opcodes::*;

        pub fn revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn abi_decode<CI>(headStart: U256, dataEnd: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if slt(sub(dataEnd, headStart, context)?, U256::from(0x0u128), context)? != U256::ZERO {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b(context)?;
            }
            Ok(())
        }

        pub fn cleanup_uint160<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = and(value, sub(shl(U256::from(0xa0u128), U256::from(0x1u128), context)?, U256::from(0x1u128), context)?, context)?;
            Ok(cleaned)
        }

        pub fn cleanup_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = cleanup_uint160(value, context)?;
            Ok(cleaned)
        }

        pub fn validator_revert_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if iszero(eq(value, cleanup_address(value, context)?, context)?, context)? != U256::ZERO {
                revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            }
            Ok(())
        }

        pub fn abi_decode_address_fromMemory<CI>(offset: U256, end_: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = mload(offset, context)?;
            validator_revert_address(value, context)?;
            Ok(value)
        }

        pub fn cleanup_bytes32<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn validator_revert_bytes32<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if iszero(eq(value, cleanup_bytes32(value, context)?, context)?, context)? != U256::ZERO {
                revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            }
            Ok(())
        }

        pub fn abi_decode_t_bytes32_fromMemory<CI>(offset: U256, end_: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = mload(offset, context)?;
            validator_revert_bytes32(value, context)?;
            Ok(value)
        }

        pub fn abi_decode_bytes32_fromMemory<CI>(headStart: U256, dataEnd: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value0 = U256::ZERO;
            if slt(sub(dataEnd, headStart, context)?, U256::from(0x20u128), context)? != U256::ZERO {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b(context)?;
            }
            value0 = abi_decode_t_bytes32_fromMemory(add(headStart, U256::from(0x0u128), context)?, dataEnd, context)?;
            Ok(value0)
        }

        pub fn abi_decode_fromMemory<CI>(headStart: U256, dataEnd: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if slt(sub(dataEnd, headStart, context)?, U256::from(0x0u128), context)? != U256::ZERO {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b(context)?;
            }
            Ok(())
        }

        pub fn abi_decode_tuple_address_fromMemory<CI>(headStart: U256, dataEnd: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value0 = U256::ZERO;
            if slt(sub(dataEnd, headStart, context)?, U256::from(0x20u128), context)? != U256::ZERO {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b(context)?;
            }
            value0 = abi_decode_address_fromMemory(add(headStart, U256::from(0x0u128), context)?, dataEnd, context)?;
            Ok(value0)
        }

        pub fn abi_encode_address<CI>(value: U256, pos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(pos, cleanup_address(value, context)?, context)?;
            Ok(())
        }

        pub fn abi_encode_address_address<CI>(headStart: U256, value0: U256, value1: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x40u128), context)?;
            abi_encode_address(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            abi_encode_address(value1, add(headStart, U256::from(0x20u128), context)?, context)?;
            Ok(tail)
        }

        pub fn abi_encode_bytes32<CI>(value: U256, pos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(pos, cleanup_bytes32(value, context)?, context)?;
            Ok(())
        }

        pub fn abi_encode_address_bytes32<CI>(headStart: U256, value0: U256, value1: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x40u128), context)?;
            abi_encode_address(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            abi_encode_bytes32(value1, add(headStart, U256::from(0x20u128), context)?, context)?;
            Ok(tail)
        }

        pub fn array_length_string<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut length = U256::ZERO;
            length = mload(value, context)?;
            Ok(length)
        }

        pub fn array_storeLengthForEncoding_string<CI>(pos: U256, length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut updated_pos = U256::ZERO;
            mstore(pos, length, context)?;
            updated_pos = add(pos, U256::from(0x20u128), context)?;
            Ok(updated_pos)
        }

        pub fn copy_memory_to_memory_with_cleanup<CI>(src: U256, dst: U256, length: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mcopy(dst, src, length, context)?;
            mstore(add(dst, length, context)?, U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn round_up_to_mul_of<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            result = and(add(value, U256::from(0x1fu128), context)?, not(U256::from(0x1fu128), context)?, context)?;
            Ok(result)
        }

        pub fn abi_encode_string_memory_ptr<CI>(value: U256, mut pos: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut end_ = U256::ZERO;
            let length = array_length_string(value, context)?;
            pos = array_storeLengthForEncoding_string(pos, length, context)?;
            copy_memory_to_memory_with_cleanup(add(value, U256::from(0x20u128), context)?, pos, length, context)?;
            end_ = add(pos, round_up_to_mul_of(length, context)?, context)?;
            Ok(end_)
        }

        pub fn abi_encode_address_string<CI>(headStart: U256, value0: U256, value1: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x40u128), context)?;
            abi_encode_address(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            mstore(add(headStart, U256::from(0x20u128), context)?, sub(tail, headStart, context)?, context)?;
            tail = abi_encode_string_memory_ptr(value1, tail, context)?;
            Ok(tail)
        }

        pub fn cleanup_bool<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = iszero(iszero(value, context)?, context)?;
            Ok(cleaned)
        }

        pub fn abi_encode_bool_to_bool<CI>(value: U256, pos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(pos, cleanup_bool(value, context)?, context)?;
            Ok(())
        }

        pub fn abi_encode_bool<CI>(headStart: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x20u128), context)?;
            abi_encode_bool_to_bool(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            Ok(tail)
        }

        pub fn array_length_bytes<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut length = U256::ZERO;
            length = mload(value, context)?;
            Ok(length)
        }

        pub fn array_storeLengthForEncoding_bytes<CI>(pos: U256, length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut updated_pos = U256::ZERO;
            mstore(pos, length, context)?;
            updated_pos = add(pos, U256::from(0x20u128), context)?;
            Ok(updated_pos)
        }

        pub fn abi_encode_bytes_memory_ptr<CI>(value: U256, mut pos: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut end_ = U256::ZERO;
            let length = array_length_bytes(value, context)?;
            pos = array_storeLengthForEncoding_bytes(pos, length, context)?;
            copy_memory_to_memory_with_cleanup(add(value, U256::from(0x20u128), context)?, pos, length, context)?;
            end_ = add(pos, round_up_to_mul_of(length, context)?, context)?;
            Ok(end_)
        }

        pub fn abi_encode_bytes<CI>(headStart: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x20u128), context)?;
            mstore(add(headStart, U256::from(0x0u128), context)?, sub(tail, headStart, context)?, context)?;
            tail = abi_encode_bytes_memory_ptr(value0, tail, context)?;
            Ok(tail)
        }

        pub fn array_storeLengthForEncoding_string_nonPadded_inplace<CI>(pos: U256, length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut updated_pos = U256::ZERO;
            updated_pos = pos;
            Ok(updated_pos)
        }

        pub fn abi_encode_string<CI>(value: U256, mut pos: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut end_ = U256::ZERO;
            let length = array_length_string(value, context)?;
            pos = array_storeLengthForEncoding_string_nonPadded_inplace(pos, length, context)?;
            copy_memory_to_memory_with_cleanup(add(value, U256::from(0x20u128), context)?, pos, length, context)?;
            end_ = add(pos, length, context)?;
            Ok(end_)
        }

        pub fn abi_encode_packed_string<CI>(mut pos: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut end_ = U256::ZERO;
            pos = abi_encode_string(value0, pos, context)?;
            end_ = pos;
            Ok(end_)
        }

        pub fn abi_encode_tuple<CI>(headStart: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x0u128), context)?;
            Ok(tail)
        }

        pub fn cleanup_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn abi_encode_uint256_to_uint256<CI>(value: U256, pos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(pos, cleanup_uint256(value, context)?, context)?;
            Ok(())
        }

        pub fn abi_encode_uint256<CI>(headStart: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x20u128), context)?;
            abi_encode_uint256_to_uint256(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            Ok(tail)
        }

        pub fn abi_encode_uint256_uint256_string<CI>(headStart: U256, value0: U256, value1: U256, value2: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x60u128), context)?;
            abi_encode_uint256_to_uint256(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            abi_encode_uint256_to_uint256(value1, add(headStart, U256::from(0x20u128), context)?, context)?;
            mstore(add(headStart, U256::from(0x40u128), context)?, sub(tail, headStart, context)?, context)?;
            tail = abi_encode_string_memory_ptr(value2, tail, context)?;
            Ok(tail)
        }

        pub fn identity<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = value;
            Ok(ret)
        }

        pub fn convert_uint256_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_uint256(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn abi_encode_userDefinedValueType_UD60x18_to_uint256<CI>(value: U256, pos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(pos, convert_uint256_to_uint256(value, context)?, context)?;
            Ok(())
        }

        pub fn abi_encode_userDefinedValueType_UD60x18<CI>(headStart: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut tail = U256::ZERO;
            tail = add(headStart, U256::from(0x20u128), context)?;
            abi_encode_userDefinedValueType_UD60x18_to_uint256(value0, add(headStart, U256::from(0x0u128), context)?, context)?;
            Ok(tail)
        }

        pub fn allocate_unbounded<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = mload(U256::from(0x40u128), context)?;
            Ok(memPtr)
        }

        pub fn panic_error_0x41<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0x4e487b71u128), context)?, context)?;
            mstore(U256::from(0x4u128), U256::from(0x41u128), context)?;
            revert(U256::from(0x0u128), U256::from(0x24u128), context)?;
            Ok(())
        }

        pub fn finalize_allocation<CI>(memPtr: U256, size: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let newFreePtr = add(memPtr, round_up_to_mul_of(size, context)?, context)?;
            if or(gt(newFreePtr, U256::from(0xffffffffffffffffu128), context)?, lt(newFreePtr, memPtr, context)?, context)? != U256::ZERO {
                panic_error_0x41(context)?;
            }
            mstore(U256::from(0x40u128), newFreePtr, context)?;
            Ok(())
        }

        pub fn allocate_memory<CI>(size: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_unbounded(context)?;
            finalize_allocation(memPtr, size, context)?;
            Ok(memPtr)
        }

        pub fn allocate_memory_struct_struct_Set<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory(U256::from(0x60u128), context)?;
            Ok(memPtr)
        }

        pub fn zero_value_for_userDefinedValueType_UD60x18<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x0u128);
            Ok(ret)
        }

        pub fn allocate_and_zero_memory_struct_struct_Set<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory_struct_struct_Set(context)?;
            let mut offset = memPtr;
            mstore(memPtr, zero_value_for_userDefinedValueType_UD60x18(context)?, context)?;
            offset = add(memPtr, U256::from(0x20u128), context)?;
            mstore(offset, zero_value_for_userDefinedValueType_UD60x18(context)?, context)?;
            offset = add(offset, U256::from(0x20u128), context)?;
            mstore(offset, zero_value_for_userDefinedValueType_UD60x18(context)?, context)?;
            offset = add(offset, U256::from(0x20u128), context)?;
            Ok(memPtr)
        }

        pub fn array_allocation_size_array_struct_Set_dyn<CI>(length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut size = U256::ZERO;
            if gt(length, U256::from(0xffffffffffffffffu128), context)? != U256::ZERO {
                panic_error_0x41(context)?;
            }
            size = mul(length, U256::from(0x20u128), context)?;
            size = add(size, U256::from(0x20u128), context)?;
            Ok(size)
        }

        pub fn allocate_memory_array_array_struct_Set_dyn<CI>(length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            let allocSize = array_allocation_size_array_struct_Set_dyn(length, context)?;
            memPtr = allocate_memory(allocSize, context)?;
            mstore(memPtr, length, context)?;
            Ok(memPtr)
        }

        pub fn array_allocation_size_string<CI>(length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut size = U256::ZERO;
            if gt(length, U256::from(0xffffffffffffffffu128), context)? != U256::ZERO {
                panic_error_0x41(context)?;
            }
            size = round_up_to_mul_of(length, context)?;
            size = add(size, U256::from(0x20u128), context)?;
            Ok(size)
        }

        pub fn allocate_memory_array_string<CI>(length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            let allocSize = array_allocation_size_string(length, context)?;
            memPtr = allocate_memory(allocSize, context)?;
            mstore(memPtr, length, context)?;
            Ok(memPtr)
        }

        pub fn allocate_memory_struct_struct_Set_storage_ptr<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory(U256::from(0x60u128), context)?;
            Ok(memPtr)
        }

        pub fn allocate_memory_struct_struct_Users_storage_ptr<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory(U256::from(0x60u128), context)?;
            Ok(memPtr)
        }

        pub fn panic_error_0x11<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0x4e487b71u128), context)?, context)?;
            mstore(U256::from(0x4u128), U256::from(0x11u128), context)?;
            revert(U256::from(0x0u128), U256::from(0x24u128), context)?;
            Ok(())
        }

        pub fn checked_mul_uint256<CI>(mut x: U256, mut y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut product = U256::ZERO;
            x = cleanup_uint256(x, context)?;
            y = cleanup_uint256(y, context)?;
            product = cleanup_uint256(mul(x, y, context)?, context)?;
            if iszero(or(iszero(x, context)?, eq(y, div(product, x, context)?, context)?, context)?, context)? != U256::ZERO {
                panic_error_0x11(context)?;
            }
            Ok(product)
        }

        pub fn array_convert_length_to_size_array_struct_Set_storage_dyn<CI>(length: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut size = U256::ZERO;
            size = length;
            size = checked_mul_uint256(U256::from(0x3u128), length, context)?;
            Ok(size)
        }

        pub fn array_dataslot_array_struct_Set_storage_dyn<CI>(ptr: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut data = U256::ZERO;
            data = ptr;
            mstore(U256::from(0x0u128), ptr, context)?;
            data = keccak256(U256::from(0x0u128), U256::from(0x20u128), context)?;
            Ok(data)
        }

        pub fn array_dataslot_array_struct_Set_storage_dyn_ptr<CI>(ptr: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut data = U256::ZERO;
            data = ptr;
            mstore(U256::from(0x0u128), ptr, context)?;
            data = keccak256(U256::from(0x0u128), U256::from(0x20u128), context)?;
            Ok(data)
        }

        pub fn array_dataslot_bytes<CI>(ptr: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut data = U256::ZERO;
            data = ptr;
            data = add(ptr, U256::from(0x20u128), context)?;
            Ok(data)
        }

        pub fn array_length_array_struct_Set_dyn<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut length = U256::ZERO;
            length = mload(value, context)?;
            Ok(length)
        }

        pub fn array_length_array_struct_Set_storage_dyn<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut length = U256::ZERO;
            length = sload(value, context)?;
            Ok(length)
        }

        pub fn array_length_array_struct_Set_storage_dyn_ptr<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut length = U256::ZERO;
            length = sload(value, context)?;
            Ok(length)
        }

        pub fn panic_error_0x32<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0x4e487b71u128), context)?, context)?;
            mstore(U256::from(0x4u128), U256::from(0x32u128), context)?;
            revert(U256::from(0x0u128), U256::from(0x24u128), context)?;
            Ok(())
        }

        pub fn storage_array_index_access_struct_Set__dyn_ptr<CI>(array: U256, index: U256, context: &mut Context<CI>) -> YulOutput<(U256, U256)>
        where
            Context<CI>: ContractInteractions,
        {
            let mut slot = U256::ZERO;
            let mut offset = U256::ZERO;
            let arrayLength = array_length_array_struct_Set_storage_dyn_ptr(array, context)?;
            if iszero(lt(index, arrayLength, context)?, context)? != U256::ZERO {
                panic_error_0x32(context)?;
            }
            let dataArea = array_dataslot_array_struct_Set_storage_dyn_ptr(array, context)?;
            slot = add(dataArea, mul(index, U256::from(0x3u128), context)?, context)?;
            offset = U256::from(0x0u128);
            Ok((slot, offset))
        }

        pub fn read_from_memoryt_userDefinedValueType_UD60x18<CI>(ptr: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut returnValue = U256::ZERO;
            let value = cleanup_uint256(mload(ptr, context)?, context)?;
            returnValue = value;
            Ok(returnValue)
        }

        pub fn prepare_store_userDefinedValueType_UD60x18<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = value;
            Ok(ret)
        }

        pub fn shift_left<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shl(U256::from(0x0u128), value, context)?;
            Ok(newValue)
        }

        pub fn update_byte_slice_shift<CI>(mut value: U256, mut toInsert: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            let mask = not(U256::from(0x0u128), context)?;
            toInsert = shift_left(toInsert, context)?;
            value = and(value, not(mask, context)?, context)?;
            result = or(value, and(toInsert, mask, context)?, context)?;
            Ok(result)
        }

        pub fn update_storage_value_offsett_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let convertedValue = convert_uint256_to_uint256(value, context)?;
            sstore(slot, update_byte_slice_shift(sload(slot, context)?, prepare_store_userDefinedValueType_UD60x18(convertedValue, context)?, context)?, context)?;
            Ok(())
        }

        pub fn copy_struct_to_storage_from_struct_Set_to_struct_Set<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let memberValue = read_from_memoryt_userDefinedValueType_UD60x18(add(value, U256::from(0x0u128), context)?, context)?;
            update_storage_value_offsett_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18(add(slot, U256::from(0x0u128), context)?, memberValue, context)?;
            let memberValue_1 = read_from_memoryt_userDefinedValueType_UD60x18(add(value, U256::from(0x20u128), context)?, context)?;
            update_storage_value_offsett_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18(add(slot, U256::from(0x1u128), context)?, memberValue_1, context)?;
            let memberValue_2 = read_from_memoryt_userDefinedValueType_UD60x18(add(value, U256::from(0x40u128), context)?, context)?;
            update_storage_value_offsett_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18(add(slot, U256::from(0x2u128), context)?, memberValue_2, context)?;
            Ok(())
        }

        pub fn panic_error_0x00<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0x4e487b71u128), context)?, context)?;
            mstore(U256::from(0x4u128), U256::from(0x0u128), context)?;
            revert(U256::from(0x0u128), U256::from(0x24u128), context)?;
            Ok(())
        }

        pub fn update_storage_value_struct_Set_to_struct_Set<CI>(slot: U256, offset: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if offset != U256::ZERO {
                panic_error_0x00(context)?;
            }
            copy_struct_to_storage_from_struct_Set_to_struct_Set(slot, value, context)?;
            Ok(())
        }

        pub fn array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr<CI>(array: U256, value0: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let oldLen = sload(array, context)?;
            if iszero(lt(oldLen, U256::from(0x10000000000000000u128), context)?, context)? != U256::ZERO {
                panic_error_0x41(context)?;
            }
            sstore(array, add(oldLen, U256::from(0x1u128), context)?, context)?;
            let (slot, offset) = storage_array_index_access_struct_Set__dyn_ptr(array, oldLen, context)?;
            update_storage_value_struct_Set_to_struct_Set(slot, offset, value0, context)?;
            Ok(())
        }

        pub fn checked_add_uint256<CI>(mut x: U256, mut y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut sum = U256::ZERO;
            x = cleanup_uint256(x, context)?;
            y = cleanup_uint256(y, context)?;
            sum = add(x, y, context)?;
            if gt(x, sum, context)? != U256::ZERO {
                panic_error_0x11(context)?;
            }
            Ok(sum)
        }

        pub fn panic_error_0x12<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0x4e487b71u128), context)?, context)?;
            mstore(U256::from(0x4u128), U256::from(0x12u128), context)?;
            revert(U256::from(0x0u128), U256::from(0x24u128), context)?;
            Ok(())
        }

        pub fn checked_div_uint256<CI>(mut x: U256, mut y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut r = U256::ZERO;
            x = cleanup_uint256(x, context)?;
            y = cleanup_uint256(y, context)?;
            if iszero(y, context)? != U256::ZERO {
                panic_error_0x12(context)?;
            }
            r = div(x, y, context)?;
            Ok(r)
        }

        pub fn cleanup_from_storage_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = and(value, sub(shl(U256::from(0xa0u128), U256::from(0x1u128), context)?, U256::from(0x1u128), context)?, context)?;
            Ok(cleaned)
        }

        pub fn cleanup_from_storage_bool<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = and(value, U256::from(0xffu128), context)?;
            Ok(cleaned)
        }

        pub fn cleanup_from_storage_userDefinedValueType_UD60x18<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_0_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1000000000000000999_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1024_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1048576_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1073741824_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1095216660480_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1099511627776_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1101567497354306722521735975_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1125899906842624_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1152921504606846976_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_11892150000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_128_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_131072_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_134217728_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_137438953472_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_140737488355328_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_144115188075855872_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1442695040888963407_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_146115107851442195738190_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_15154262241479264171_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_16000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_16384_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_16711680_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_16777216_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_16_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_17179869184_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_17592186044416_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18014398509481984_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18374686479671623680_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551617_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551619_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551622_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551627_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551638_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551660_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551705_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551793_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709551971_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709552326_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709553036_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709554455_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709557294_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709562973_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709574329_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709597042_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709642468_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709733320_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073709915025_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073710278433_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073711005251_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073712458886_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073715366156_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073721180696_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073732809776_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073756067936_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073802584256_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744073895616895_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744074081682175_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744074453812734_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744075198073852_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744076686596088_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744079663640561_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744085617729507_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744097525907406_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744121342263227_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744168974974960_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744264240398796_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744454771247945_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446744835832952145_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446745597956384162_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446747122203342655_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446750170697637486_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446756267687738522_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446768461673986097_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446792849670663277_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446841625760745902_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18446939178327825412_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18447134285009651015_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18447524504564044946_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18448304968436414829_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18449865995240371898_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18452988445124272033_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18459234930309000272_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18471734244850835106_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18496758270674070881_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18546908069882975960_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18647615946650685159_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_18850675170876015534_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_191999999999999999999_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_191_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_19263451207323153962_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_1_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_20085536923187667724_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_20116317054877281742_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2048_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_20820000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2097152_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2147483648_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_21936999301089678047_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2199023255552_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2251799813685248_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2305843009213693952_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_23140692632779268962_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_255_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_256_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_26087635650665564425_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_262144_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_268435456_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2718281828459045234_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2718281828459045235_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_274877906944_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_280375465082880_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_281474976710656_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_288230376151711744_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_299559147061116199277615819889397_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_2_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_3000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_3138550867693340381917894711603833208051177722232017256448_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_3141592653589793238_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_32768_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_32_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_33333333000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_33554432_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_340282366920938463222979506443879150094819893272894857679_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_34359738368_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_35184372088832_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_36028797018963968_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4194304_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4294967296_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4398046511104_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4503599627370496_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4611686018427387904_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_4_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_512_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_524288_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_536870912_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_54598150033144239019_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_549755813888_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_562949953421312_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_576460752303423488_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_6235149080811616783682415370612321304359995711_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_6277101735386680754977611748738314679353920434623901771623000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_64000000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_64_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_65280_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_65536_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_67108864_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_6851360256686183998595702657852843771046889809565_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_68719476736_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_70368744177664_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_71002000000000000000_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_72057594037927936_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_7389056098930650223_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8192_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8388608_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8589934592_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8796093022208_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_88722839111672999627_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8886110520507872601090007_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_8_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_9007199254740992_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_9223372036854775808_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_rational_by_1<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn shift_left_dynamic<CI>(bits: U256, value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shl(bits, value, context)?;
            Ok(newValue)
        }

        pub fn update_byte_slice_dynamic32<CI>(mut value: U256, shiftBytes: U256, mut toInsert: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            let shiftBits = mul(shiftBytes, U256::from(0x8u128), context)?;
            let mask = shift_left_dynamic(shiftBits, not(U256::from(0x0u128), context)?, context)?;
            toInsert = shift_left_dynamic(shiftBits, toInsert, context)?;
            value = and(value, not(mask, context)?, context)?;
            result = or(value, and(toInsert, mask, context)?, context)?;
            Ok(result)
        }

        pub fn update_storage_value_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18<CI>(slot: U256, offset: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let convertedValue = convert_uint256_to_uint256(value, context)?;
            sstore(slot, update_byte_slice_dynamic32(sload(slot, context)?, offset, prepare_store_userDefinedValueType_UD60x18(convertedValue, context)?, context)?, context)?;
            Ok(())
        }

        pub fn zero_value_for_split_userDefinedValueType_UD60x18<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x0u128);
            Ok(ret)
        }

        pub fn storage_set_to_zero_userDefinedValueType_UD60x18<CI>(slot: U256, offset: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let zero = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            update_storage_value_userDefinedValueType_UD60x18_to_userDefinedValueType_UD60x18(slot, offset, zero, context)?;
            Ok(())
        }

        pub fn clear_struct_storage_struct_Set<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            storage_set_to_zero_userDefinedValueType_UD60x18(add(slot, U256::from(0x0u128), context)?, U256::from(0x0u128), context)?;
            storage_set_to_zero_userDefinedValueType_UD60x18(add(slot, U256::from(0x1u128), context)?, U256::from(0x0u128), context)?;
            storage_set_to_zero_userDefinedValueType_UD60x18(add(slot, U256::from(0x2u128), context)?, U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn storage_set_to_zero_struct_Set<CI>(slot: U256, offset: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if iszero(eq(offset, U256::from(0x0u128), context)?, context)? != U256::ZERO {
                panic_error_0x00(context)?;
            }
            clear_struct_storage_struct_Set(slot, context)?;
            Ok(())
        }

        pub fn clear_storage_range_struct_Set<CI>(mut start: U256, end_: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            // for loop
            while lt(start, end_, context)? != U256::ZERO {
                // body
                {
                    storage_set_to_zero_struct_Set(start, U256::from(0x0u128), context)?;
                }
                // post
                {
                    start = add(start, U256::from(0x3u128), context)?;
                }
            }
            Ok(())
        }

        pub fn cleanup_storage_array_end_array_struct_Set__dyn<CI>(array: U256, len: U256, startIndex: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if lt(startIndex, len, context)? != U256::ZERO {
                let oldSlotCount = array_convert_length_to_size_array_struct_Set_storage_dyn(len, context)?;
                let newSlotCount = array_convert_length_to_size_array_struct_Set_storage_dyn(startIndex, context)?;
                let arrayDataStart = array_dataslot_array_struct_Set_storage_dyn(array, context)?;
                clear_storage_range_struct_Set(add(arrayDataStart, newSlotCount, context)?, add(arrayDataStart, oldSlotCount, context)?, context)?;
            }
            Ok(())
        }

        pub fn cleanup_t_rational_by<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_t_rational_by_1<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = value;
            Ok(cleaned)
        }

        pub fn cleanup_uint8<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut cleaned = U256::ZERO;
            cleaned = and(value, U256::from(0xffu128), context)?;
            Ok(cleaned)
        }

        pub fn resize_array_array_struct_Set_storage_dyn<CI>(array: U256, newLen: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if gt(newLen, U256::from(0x10000000000000000u128), context)? != U256::ZERO {
                panic_error_0x41(context)?;
            }
            let oldLen = array_length_array_struct_Set_storage_dyn(array, context)?;
            sstore(array, newLen, context)?;
            cleanup_storage_array_end_array_struct_Set__dyn(array, oldLen, newLen, context)?;
            Ok(())
        }

        pub fn clear_storage_array_array_struct_Set__dyn<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            resize_array_array_struct_Set_storage_dyn(slot, U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn convert_rational_2718281828459045235_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2718281828459045235_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_E<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let expr = convert_rational_2718281828459045235_by_1_to_uint256(U256::from(0x25b946ebc0b36173u128), context)?;
            ret = expr;
            Ok(ret)
        }

        pub fn convert_rational_133084258667509499440_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_uEXP_MAX_INPUT<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let _1 = convert_rational_133084258667509499440_by_1_to_uint256(U256::from(0x736ea4425c11ac630u128), context)?;
            ret = _1;
            Ok(ret)
        }

        pub fn constant_EXP_MAX_INPUT<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let expr = constant_uEXP_MAX_INPUT(context)?;
            let expr_1 = convert_uint256_to_uint256(expr, context)?;
            ret = expr_1;
            Ok(ret)
        }

        pub fn convert_rational_3141592653589793238_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_3141592653589793238_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_PI<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let expr = convert_rational_3141592653589793238_by_1_to_uint256(U256::from(0x2b992ddfa23249d6u128), context)?;
            ret = expr;
            Ok(ret)
        }

        pub fn convert_rational_1000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_uUNIT<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let _1 = convert_rational_1000000000000000000_by_1_to_uint256(U256::from(0xde0b6b3a7640000u128), context)?;
            ret = _1;
            Ok(ret)
        }

        pub fn constant_UNIT<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let expr = constant_uUNIT(context)?;
            let expr_1 = convert_uint256_to_uint256(expr, context)?;
            ret = expr_1;
            Ok(ret)
        }

        pub fn constant_UNIT_2209<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let _1 = convert_rational_1000000000000000000_by_1_to_uint256(U256::from(0xde0b6b3a7640000u128), context)?;
            ret = _1;
            Ok(ret)
        }

        pub fn convert_rational_0_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_0_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_ZERO<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let expr = convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?;
            ret = expr;
            Ok(ret)
        }

        pub fn convert_rational_191999999999999999999_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_191999999999999999999_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_uEXP2_MAX_INPUT<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let _1 = convert_rational_191999999999999999999_by_1_to_uint256(U256::from(0xa688906bd8affffffu128), context)?;
            ret = _1;
            Ok(ret)
        }

        pub fn convert_rational_1442695040888963407_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1442695040888963407_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_uLOG2_E<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            let _1 = convert_rational_1442695040888963407_by_1_to_uint256(U256::from(0x14057b7ef767814fu128), context)?;
            ret = _1;
            Ok(ret)
        }

        pub fn convert_uint160_to_uint160<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint160(identity(cleanup_uint160(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_uint160_to_contract_Vm<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint160_to_uint160(value, context)?;
            Ok(converted)
        }

        pub fn convert_address_to_contract_Vm<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint160_to_contract_Vm(value, context)?;
            Ok(converted)
        }

        pub fn shift_right_0_unsigned<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shr(U256::from(0x0u128), value, context)?;
            Ok(newValue)
        }

        pub fn convert_bytes32_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint256_to_uint256(shift_right_0_unsigned(value, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_uint160_to_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint160_to_uint160(value, context)?;
            Ok(converted)
        }

        pub fn convert_uint256_to_uint160<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint160(identity(cleanup_uint256(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn constant_vm<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret_address = U256::ZERO;
            let expr = convert_bytes32_to_uint256(U256::from_be_slice(&[0x88, 0x5c, 0xb6, 0x92, 0x40, 0xa9, 0x35, 0xd6, 0x32, 0xd7, 0x9c, 0x31, 0x71, 0x09, 0x70, 0x9e, 0xcf, 0xa9, 0x1a, 0x80, 0x62, 0x6f, 0xf3, 0x98, 0x9d, 0x68, 0xf6, 0x7f, 0x5b, 0x1d, 0xd1, 0x2d]), context)?;
            let expr_1 = convert_uint256_to_uint160(expr, context)?;
            let expr_2 = convert_uint160_to_address(expr_1, context)?;
            let expr_18894_address = convert_address_to_contract_Vm(expr_2, context)?;
            ret_address = expr_18894_address;
            Ok(ret_address)
        }

        pub fn constant_vm_13027<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret_address = U256::ZERO;
            let expr = convert_bytes32_to_uint256(U256::from_be_slice(&[0x88, 0x5c, 0xb6, 0x92, 0x40, 0xa9, 0x35, 0xd6, 0x32, 0xd7, 0x9c, 0x31, 0x71, 0x09, 0x70, 0x9e, 0xcf, 0xa9, 0x1a, 0x80, 0x62, 0x6f, 0xf3, 0x98, 0x9d, 0x68, 0xf6, 0x7f, 0x5b, 0x1d, 0xd1, 0x2d]), context)?;
            let expr_1 = convert_uint256_to_uint160(expr, context)?;
            let expr_2 = convert_uint160_to_address(expr_1, context)?;
            let expr_13026_address = convert_address_to_contract_Vm(expr_2, context)?;
            ret_address = expr_13026_address;
            Ok(ret_address)
        }

        pub fn constant_vm_16269<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret_address = U256::ZERO;
            let expr = convert_bytes32_to_uint256(U256::from_be_slice(&[0x88, 0x5c, 0xb6, 0x92, 0x40, 0xa9, 0x35, 0xd6, 0x32, 0xd7, 0x9c, 0x31, 0x71, 0x09, 0x70, 0x9e, 0xcf, 0xa9, 0x1a, 0x80, 0x62, 0x6f, 0xf3, 0x98, 0x9d, 0x68, 0xf6, 0x7f, 0x5b, 0x1d, 0xd1, 0x2d]), context)?;
            let expr_1 = convert_uint256_to_uint160(expr, context)?;
            let expr_2 = convert_uint160_to_address(expr_1, context)?;
            let expr_16268_address = convert_address_to_contract_Vm(expr_2, context)?;
            ret_address = expr_16268_address;
            Ok(ret_address)
        }

        pub fn convert_address_to_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint160_to_address(value, context)?;
            Ok(converted)
        }

        pub fn convert_array_array_struct_Set_storage_dyn_storage_to_array_struct_Set__dyn_ptr<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = value;
            Ok(converted)
        }

        pub fn extract_from_storage_value_offsett_userDefinedValueType_UD60x18<CI>(slot_value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = cleanup_from_storage_userDefinedValueType_UD60x18(shift_right_0_unsigned(slot_value, context)?, context)?;
            Ok(value)
        }

        pub fn read_from_storage_split_offset_userDefinedValueType_UD60x18<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = extract_from_storage_value_offsett_userDefinedValueType_UD60x18(sload(slot, context)?, context)?;
            Ok(value)
        }

        pub fn write_to_memory_userDefinedValueType_UD60x18<CI>(memPtr: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(memPtr, cleanup_uint256(value, context)?, context)?;
            Ok(())
        }

        pub fn read_from_storage_reference_type_struct_Set<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = allocate_memory_struct_struct_Set(context)?;
            let memberValue = read_from_storage_split_offset_userDefinedValueType_UD60x18(add(slot, U256::from(0x0u128), context)?, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(value, U256::from(0x0u128), context)?, memberValue, context)?;
            let memberValue_1 = read_from_storage_split_offset_userDefinedValueType_UD60x18(add(slot, U256::from(0x1u128), context)?, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(value, U256::from(0x20u128), context)?, memberValue_1, context)?;
            let memberValue_2 = read_from_storage_split_offset_userDefinedValueType_UD60x18(add(slot, U256::from(0x2u128), context)?, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(value, U256::from(0x40u128), context)?, memberValue_2, context)?;
            Ok(value)
        }

        pub fn convert_struct_Set_storage_to_struct_Set<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = read_from_storage_reference_type_struct_Set(value, context)?;
            Ok(converted)
        }

        pub fn copy_array_from_storage_to_memory_array_struct_Set__dyn<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            let length = array_length_array_struct_Set_storage_dyn(slot, context)?;
            memPtr = allocate_memory_array_array_struct_Set_dyn(length, context)?;
            let mut mpos = memPtr;
            mpos = add(memPtr, U256::from(0x20u128), context)?;
            let mut spos = array_dataslot_array_struct_Set_storage_dyn(slot, context)?;
            let mut i = U256::from(0x0u128);
            // for loop
            while lt(i, length, context)? != U256::ZERO {
                // body
                {
                    mstore(mpos, convert_struct_Set_storage_to_struct_Set(spos, context)?, context)?;
                    mpos = add(mpos, U256::from(0x20u128), context)?;
                    spos = add(spos, U256::from(0x3u128), context)?;
                }
                // post
                {
                    i = add(i, U256::from(0x1u128), context)?;
                }
            }
            Ok(memPtr)
        }

        pub fn convert_array_array_struct_Set_storage_dyn_to_array_struct_Set_dyn<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = copy_array_from_storage_to_memory_array_struct_Set__dyn(value, context)?;
            Ok(converted)
        }

        pub fn convert_contract_Vm_to_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = convert_uint160_to_address(value, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1000000000000000999_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1000000000000000999_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1024_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1024_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1048576_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1048576_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1073741824_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1073741824_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1095216660480_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1095216660480_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1099511627776_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1099511627776_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1101567497354306722521735975_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1101567497354306722521735975_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1125899906842624_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1125899906842624_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1152921504606846976_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1152921504606846976_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_11892150000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_11892150000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_128_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_128_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_131072_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_131072_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_134217728_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_134217728_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_137438953472_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_137438953472_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_140737488355328_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_140737488355328_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_144115188075855872_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_144115188075855872_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_15154262241479264171_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_15154262241479264171_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_16000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_16000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_16384_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_16384_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_16711680_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_16711680_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_16777216_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_16777216_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_16_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_16_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_17179869184_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_17179869184_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_17592186044416_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_17592186044416_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18014398509481984_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18014398509481984_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18374686479671623680_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18374686479671623680_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551617_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551617_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551619_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551619_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551622_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551622_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551627_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551627_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551638_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551638_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551660_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551660_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551705_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551705_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551793_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551793_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709551971_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709551971_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709552326_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709552326_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709553036_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709553036_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709554455_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709554455_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709557294_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709557294_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709562973_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709562973_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709574329_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709574329_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709597042_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709597042_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709642468_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709642468_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709733320_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709733320_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073709915025_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073709915025_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073710278433_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073710278433_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073711005251_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073711005251_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073712458886_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073712458886_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073715366156_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073715366156_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073721180696_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073721180696_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073732809776_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073732809776_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073756067936_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073756067936_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073802584256_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073802584256_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744073895616895_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744073895616895_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744074081682175_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744074081682175_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744074453812734_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744074453812734_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744075198073852_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744075198073852_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744076686596088_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744076686596088_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744079663640561_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744079663640561_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744085617729507_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744085617729507_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744097525907406_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744097525907406_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744121342263227_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744121342263227_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744168974974960_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744168974974960_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744264240398796_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744264240398796_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744454771247945_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744454771247945_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446744835832952145_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446744835832952145_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446745597956384162_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446745597956384162_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446747122203342655_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446747122203342655_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446750170697637486_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446750170697637486_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446756267687738522_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446756267687738522_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446768461673986097_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446768461673986097_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446792849670663277_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446792849670663277_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446841625760745902_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446841625760745902_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18446939178327825412_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18446939178327825412_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18447134285009651015_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18447134285009651015_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18447524504564044946_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18447524504564044946_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18448304968436414829_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18448304968436414829_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18449865995240371898_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18449865995240371898_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18452988445124272033_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18452988445124272033_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18459234930309000272_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18459234930309000272_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18471734244850835106_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18471734244850835106_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18496758270674070881_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18496758270674070881_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18546908069882975960_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18546908069882975960_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18647615946650685159_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18647615946650685159_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_18850675170876015534_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_18850675170876015534_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_191_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_191_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_1_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_1_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_20085536923187667724_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_20085536923187667724_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_20116317054877281742_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_20116317054877281742_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2048_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2048_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_20820000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_20820000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2097152_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2097152_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2147483648_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2147483648_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_21936999301089678047_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_21936999301089678047_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2199023255552_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2199023255552_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2251799813685248_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2251799813685248_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2305843009213693952_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2305843009213693952_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_23140692632779268962_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_23140692632779268962_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_255_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_255_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_256_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_256_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_26087635650665564425_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_26087635650665564425_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_262144_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_262144_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_268435456_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_268435456_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2718281828459045234_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2718281828459045234_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_274877906944_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_274877906944_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_280375465082880_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_280375465082880_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_281474976710656_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_281474976710656_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_288230376151711744_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_288230376151711744_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_299559147061116199277615819889397_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_299559147061116199277615819889397_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_2_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_2_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_3000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_3000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_3138550867693340381917894711603833208051177722232017256448_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_3138550867693340381917894711603833208051177722232017256448_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_32768_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_32768_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_32_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_32_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_33333333000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_33333333000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_33554432_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_33554432_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_340282366920938463222979506443879150094819893272894857679_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_340282366920938463222979506443879150094819893272894857679_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_34359738368_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_34359738368_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_35184372088832_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_35184372088832_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_36028797018963968_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_36028797018963968_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4096_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_by_1(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4194304_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4194304_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4278190080_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_t_rational_by_1(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4294967296_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4294967296_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4398046511104_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4398046511104_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4503599627370496_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4503599627370496_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4611686018427387904_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4611686018427387904_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_4_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_4_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_512_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_512_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_524288_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_524288_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_536870912_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_536870912_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_54598150033144239019_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_54598150033144239019_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_549755813888_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_549755813888_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_562949953421312_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_562949953421312_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_576460752303423488_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_576460752303423488_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_6235149080811616783682415370612321304359995711_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_6235149080811616783682415370612321304359995711_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_6277101735386680754977611748738314679353920434623901771623000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_6277101735386680754977611748738314679353920434623901771623000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_64000000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_64000000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_64_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_64_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_65280_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_65280_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_65536_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_65536_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_67108864_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_67108864_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_6851360256686183998595702657852843771046889809565_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_6851360256686183998595702657852843771046889809565_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_68719476736_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_68719476736_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_70368744177664_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_70368744177664_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_71002000000000000000_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_71002000000000000000_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_71776119061217280_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_t_rational_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_72057594037927936_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_72057594037927936_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_7389056098930650223_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_7389056098930650223_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8192_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8192_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8388608_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8388608_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8589934592_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8589934592_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8796093022208_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8796093022208_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_88722839111672999627_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_88722839111672999627_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8886110520507872601090007_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8886110520507872601090007_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_8_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_8_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_9007199254740992_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_9007199254740992_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_9223372036854775808_by_1_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_9223372036854775808_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_by_to_bytes32<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_bytes32(shift_left(cleanup_rational_0_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_by_to_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_19263451207323153962_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn convert_rational_by_to_uint8<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint8(identity(cleanup_rational_64_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn store_literal_in_memory_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6<CI>(memPtr: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(add(memPtr, U256::from(0x0u128), context)?, from_hex("426f620000000000000000000000000000000000000000000000000000000000"), context)?;
            Ok(())
        }

        pub fn copy_literal_to_memory_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory_array_string(U256::from(0x3u128), context)?;
            store_literal_in_memory_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6(add(memPtr, U256::from(0x20u128), context)?, context)?;
            Ok(memPtr)
        }

        pub fn convert_stringliteral_28ca_to_string<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = copy_literal_to_memory_28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6(context)?;
            Ok(converted)
        }

        pub fn store_literal_in_memory_75a9cc5fd7b50279c2043924d80309443980c4ea3301cde47807a320566d1f58<CI>(memPtr: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(add(memPtr, U256::from(0x0u128), context)?, from_hex("4576650000000000000000000000000000000000000000000000000000000000"), context)?;
            Ok(())
        }

        pub fn copy_literal_to_memory_75a9cc5fd7b50279c2043924d80309443980c4ea3301cde47807a320566d1f58<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory_array_string(U256::from(0x3u128), context)?;
            store_literal_in_memory_75a9cc5fd7b50279c2043924d80309443980c4ea3301cde47807a320566d1f58(add(memPtr, U256::from(0x20u128), context)?, context)?;
            Ok(memPtr)
        }

        pub fn convert_stringliteral_75a9_to_string<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = copy_literal_to_memory_75a9cc5fd7b50279c2043924d80309443980c4ea3301cde47807a320566d1f58(context)?;
            Ok(converted)
        }

        pub fn convert_stringliteral_8f44_to_bytes32<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = shl(U256::from(0xd2u128), U256::from(0x19985a5b1959u128), context)?;
            Ok(converted)
        }

        pub fn store_literal_in_memory_c4d84668fea1f48030e1c93f55c218803f2ec8eefbd44fdb844b99c496a7cc0e<CI>(memPtr: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(add(memPtr, U256::from(0x0u128), context)?, from_hex("5544363078313820657870000000000000000000000000000000000000000000"), context)?;
            Ok(())
        }

        pub fn copy_literal_to_memory_c4d84668fea1f48030e1c93f55c218803f2ec8eefbd44fdb844b99c496a7cc0e<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory_array_string(U256::from(0xbu128), context)?;
            store_literal_in_memory_c4d84668fea1f48030e1c93f55c218803f2ec8eefbd44fdb844b99c496a7cc0e(add(memPtr, U256::from(0x20u128), context)?, context)?;
            Ok(memPtr)
        }

        pub fn convert_stringliteral_c4d8_to_string<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = copy_literal_to_memory_c4d84668fea1f48030e1c93f55c218803f2ec8eefbd44fdb844b99c496a7cc0e(context)?;
            Ok(converted)
        }

        pub fn store_literal_in_memory_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a<CI>(memPtr: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(add(memPtr, U256::from(0x0u128), context)?, from_hex("416c696365000000000000000000000000000000000000000000000000000000"), context)?;
            Ok(())
        }

        pub fn copy_literal_to_memory_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut memPtr = U256::ZERO;
            memPtr = allocate_memory_array_string(U256::from(0x5u128), context)?;
            store_literal_in_memory_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a(add(memPtr, U256::from(0x20u128), context)?, context)?;
            Ok(memPtr)
        }

        pub fn convert_stringliteral_to_string<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = copy_literal_to_memory_81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a(context)?;
            Ok(converted)
        }

        pub fn convert_t_rational_by_to_t_uint256<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut converted = U256::ZERO;
            converted = cleanup_uint256(identity(cleanup_rational_146115107851442195738190_by(value, context)?, context)?, context)?;
            Ok(converted)
        }

        pub fn read_from_memoryt_address<CI>(ptr: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut returnValue = U256::ZERO;
            let value = cleanup_address(mload(ptr, context)?, context)?;
            returnValue = value;
            Ok(returnValue)
        }

        pub fn prepare_store_address<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = value;
            Ok(ret)
        }

        pub fn update_byte_slice_shift_0<CI>(mut value: U256, mut toInsert: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            let mask = sub(shl(U256::from(0xa0u128), U256::from(0x1u128), context)?, U256::from(0x1u128), context)?;
            toInsert = shift_left(toInsert, context)?;
            value = and(value, not(mask, context)?, context)?;
            result = or(value, and(toInsert, mask, context)?, context)?;
            Ok(result)
        }

        pub fn update_storage_value_offsett_address_to_address<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let convertedValue = convert_address_to_address(value, context)?;
            sstore(slot, update_byte_slice_shift_0(sload(slot, context)?, prepare_store_address(convertedValue, context)?, context)?, context)?;
            Ok(())
        }

        pub fn copy_struct_to_storage_from_struct_Users_to_struct_Users<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let memberValue = read_from_memoryt_address(add(value, U256::from(0x0u128), context)?, context)?;
            update_storage_value_offsett_address_to_address(add(slot, U256::from(0x0u128), context)?, memberValue, context)?;
            let memberValue_1 = read_from_memoryt_address(add(value, U256::from(0x20u128), context)?, context)?;
            update_storage_value_offsett_address_to_address(add(slot, U256::from(0x1u128), context)?, memberValue_1, context)?;
            let memberValue_2 = read_from_memoryt_address(add(value, U256::from(0x40u128), context)?, context)?;
            update_storage_value_offsett_address_to_address(add(slot, U256::from(0x2u128), context)?, memberValue_2, context)?;
            Ok(())
        }

        pub fn shift_right_8_unsigned<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shr(U256::from(0x8u128), value, context)?;
            Ok(newValue)
        }

        pub fn extract_from_storage_value_offsett_bool<CI>(slot_value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = cleanup_from_storage_bool(shift_right_8_unsigned(slot_value, context)?, context)?;
            Ok(value)
        }

        pub fn read_from_storage_split_offset_bool<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = extract_from_storage_value_offsett_bool(sload(slot, context)?, context)?;
            Ok(value)
        }

        pub fn revert_forward<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let pos = allocate_unbounded(context)?;
            returndatacopy(pos, U256::from(0x0u128), returndatasize(context)?, context)?;
            revert(pos, returndatasize(context)?, context)?;
            Ok(())
        }

        pub fn shift_left_224<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shl(U256::from(0xe0u128), value, context)?;
            Ok(newValue)
        }

        pub fn zero_value_for_split_bool<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x0u128);
            Ok(ret)
        }

        pub fn fun_failed<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var = U256::ZERO;
            let zero_bool = zero_value_for_split_bool(context)?;
            var = zero_bool;
            let _1 = read_from_storage_split_offset_bool(U256::from(0x0u128), context)?;
            // switch
            let δ = _1;
            if δ == U256::from(0x0u128) {
                let expr_16400_address = constant_vm_16269(context)?;
                let expr_16401_address = convert_contract_Vm_to_address(expr_16400_address, context)?;
                let expr = convert_stringliteral_8f44_to_bytes32(context)?;
                let _2 = allocate_unbounded(context)?;
                mstore(_2, shift_left_224(U256::from(0x667f9d70u128), context)?, context)?;
                let _3 = abi_encode_address_bytes32(add(_2, U256::from(0x4u128), context)?, expr_16401_address, expr, context)?;
                let _4 = staticcall(gas(context)?, expr_16401_address, _2, sub(_3, _2, context)?, _2, U256::from(0x20u128), context)?;
                if iszero(_4, context)? != U256::ZERO {
                    revert_forward(context)?;
                }
                let mut expr_1 = U256::ZERO;
                if _4 != U256::ZERO {
                    let mut _5 = U256::from(0x20u128);
                    if gt(U256::from(0x20u128), returndatasize(context)?, context)? != U256::ZERO {
                        _5 = returndatasize(context)?;
                    }
                    finalize_allocation(_2, _5, context)?;
                    expr_1 = abi_decode_bytes32_fromMemory(_2, add(_2, _5, context)?, context)?;
                }
                let expr_2 = convert_rational_by_to_bytes32(U256::from(0x0u128), context)?;
                let expr_3 = iszero(eq(cleanup_bytes32(expr_1, context)?, cleanup_bytes32(expr_2, context)?, context)?, context)?;
                var = expr_3;
                return Ok(var);
            }
            Ok(var)
        }

        pub fn revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn external_fun_failed<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if callvalue(context)? != U256::ZERO {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
            }
            abi_decode(U256::from(0x4u128), calldatasize(context)?, context)?;
            let ret = fun_failed(context)?;
            let memPos = allocate_unbounded(context)?;
            let memEnd = abi_encode_bool(memPos, ret, context)?;
            return_(memPos, sub(memEnd, memPos, context)?, context)?;
            Ok(())
        }

        pub fn revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn zero_value_for_split_address<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x0u128);
            Ok(ret)
        }

        pub fn zero_value_for_split_uint256<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x0u128);
            Ok(ret)
        }

        pub fn fun_makeAddrAndKey<CI>(var_name_mpos: U256, context: &mut Context<CI>) -> YulOutput<(U256, U256)>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_addr = U256::ZERO;
            let mut var_privateKey = U256::ZERO;
            let zero_address = zero_value_for_split_address(context)?;
            var_addr = zero_address;
            let zero_uint256 = zero_value_for_split_uint256(context)?;
            var_privateKey = zero_uint256;
            let expr_20655_mpos = allocate_unbounded(context)?;
            let _1 = add(expr_20655_mpos, U256::from(0x20u128), context)?;
            let _2 = abi_encode_packed_string(_1, var_name_mpos, context)?;
            mstore(expr_20655_mpos, sub(_2, _1, context)?, context)?;
            finalize_allocation(expr_20655_mpos, sub(_2, expr_20655_mpos, context)?, context)?;
            let expr = keccak256(array_dataslot_bytes(expr_20655_mpos, context)?, array_length_bytes(expr_20655_mpos, context)?, context)?;
            let expr_1 = convert_bytes32_to_uint256(expr, context)?;
            var_privateKey = expr_1;
            let expr_20661_address = constant_vm(context)?;
            let expr_20662_address = convert_contract_Vm_to_address(expr_20661_address, context)?;
            let _3 = allocate_unbounded(context)?;
            mstore(_3, shift_left_224(U256::from(0xffa18649u128), context)?, context)?;
            let _4 = abi_encode_uint256(add(_3, U256::from(0x4u128), context)?, expr_1, context)?;
            let _5 = staticcall(gas(context)?, expr_20662_address, _3, sub(_4, _3, context)?, _3, U256::from(0x20u128), context)?;
            if iszero(_5, context)? != U256::ZERO {
                revert_forward(context)?;
            }
            let mut expr_2 = U256::ZERO;
            if _5 != U256::ZERO {
                let mut _6 = U256::from(0x20u128);
                if gt(U256::from(0x20u128), returndatasize(context)?, context)? != U256::ZERO {
                    _6 = returndatasize(context)?;
                }
                finalize_allocation(_3, _6, context)?;
                expr_2 = abi_decode_tuple_address_fromMemory(_3, add(_3, _6, context)?, context)?;
            }
            var_addr = expr_2;
            if iszero(extcodesize(expr_20662_address, context)?, context)? != U256::ZERO {
                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20(context)?;
            }
            let _7 = allocate_unbounded(context)?;
            mstore(_7, shift_left_224(U256::from(0xc657c718u128), context)?, context)?;
            let _8 = abi_encode_address_string(add(_7, U256::from(0x4u128), context)?, expr_2, var_name_mpos, context)?;
            let _9 = call(gas(context)?, expr_20662_address, U256::from(0x0u128), _7, sub(_8, _7, context)?, _7, U256::from(0x0u128), context)?;
            if iszero(_9, context)? != U256::ZERO {
                revert_forward(context)?;
            }
            if _9 != U256::ZERO {
                let mut _10 = U256::from(0x0u128);
                if gt(U256::from(0x0u128), returndatasize(context)?, context)? != U256::ZERO {
                    _10 = returndatasize(context)?;
                }
                finalize_allocation(_7, _10, context)?;
                abi_decode_fromMemory(_7, add(_7, _10, context)?, context)?;
            }
            Ok((var_addr, var_privateKey))
        }

        pub fn fun_makeAddr<CI>(var_name_20677_mpos: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_addr = U256::ZERO;
            let zero_t_address = zero_value_for_split_address(context)?;
            var_addr = zero_t_address;
            let (expr_component, expr_component_1) = fun_makeAddrAndKey(var_name_20677_mpos, context)?;
            var_addr = expr_component;
            Ok(var_addr)
        }

        pub fn extract_from_storage_value_offsett_address<CI>(slot_value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = cleanup_from_storage_address(shift_right_0_unsigned(slot_value, context)?, context)?;
            Ok(value)
        }

        pub fn read_from_storage_split_offset_address<CI>(slot: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut value = U256::ZERO;
            value = extract_from_storage_value_offsett_address(sload(slot, context)?, context)?;
            Ok(value)
        }

        pub fn update_storage_value_offsett_struct_Users_to_struct_Users<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            copy_struct_to_storage_from_struct_Users_to_struct_Users(slot, value, context)?;
            Ok(())
        }

        pub fn write_to_memory_address<CI>(memPtr: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(memPtr, cleanup_address(value, context)?, context)?;
            Ok(())
        }

        pub fn fun_setUp<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let _mpos = convert_stringliteral_to_string(context)?;
            let expr = fun_makeAddr(_mpos, context)?;
            let _2_mpos = convert_stringliteral_28ca_to_string(context)?;
            let expr_1 = fun_makeAddr(_2_mpos, context)?;
            let _3_mpos = convert_stringliteral_75a9_to_string(context)?;
            let expr_2 = fun_makeAddr(_3_mpos, context)?;
            let expr_13079_mpos = allocate_memory_struct_struct_Users_storage_ptr(context)?;
            write_to_memory_address(add(expr_13079_mpos, U256::from(0x0u128), context)?, expr, context)?;
            write_to_memory_address(add(expr_13079_mpos, U256::from(0x20u128), context)?, expr_1, context)?;
            write_to_memory_address(add(expr_13079_mpos, U256::from(0x40u128), context)?, expr_2, context)?;
            update_storage_value_offsett_struct_Users_to_struct_Users(U256::from(0x9u128), expr_13079_mpos, context)?;
            let _4_slot = U256::from(0x9u128);
            let expr_address = constant_vm_13027(context)?;
            let expr_13084_address = convert_contract_Vm_to_address(expr_address, context)?;
            let _1 = add(_4_slot, U256::from(0x0u128), context)?;
            let _2 = read_from_storage_split_offset_address(_1, context)?;
            let _3 = read_from_storage_split_offset_address(_1, context)?;
            if iszero(extcodesize(expr_13084_address, context)?, context)? != U256::ZERO {
                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20(context)?;
            }
            let _4 = allocate_unbounded(context)?;
            mstore(_4, shift_left_224(U256::from(0x45b56078u128), context)?, context)?;
            let _5 = abi_encode_address_address(add(_4, U256::from(0x4u128), context)?, _2, _3, context)?;
            let _6 = call(gas(context)?, expr_13084_address, U256::from(0x0u128), _4, sub(_5, _4, context)?, _4, U256::from(0x0u128), context)?;
            if iszero(_6, context)? != U256::ZERO {
                revert_forward(context)?;
            }
            if _6 != U256::ZERO {
                let mut _7 = U256::from(0x0u128);
                if gt(U256::from(0x0u128), returndatasize(context)?, context)? != U256::ZERO {
                    _7 = returndatasize(context)?;
                }
                finalize_allocation(_4, _7, context)?;
                abi_decode_fromMemory(_4, add(_4, _7, context)?, context)?;
            }
            Ok(())
        }

        pub fn external_fun_setUp<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if callvalue(context)? != U256::ZERO {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
            }
            abi_decode(U256::from(0x4u128), calldatasize(context)?, context)?;
            fun_setUp(context)?;
            let memPos = allocate_unbounded(context)?;
            let memEnd = abi_encode_tuple(memPos, context)?;
            return_(memPos, sub(memEnd, memPos, context)?, context)?;
            Ok(())
        }

        pub fn fun_ud<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_t_userDefinedValueType_UD60x18 = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            var_result = zero_t_userDefinedValueType_UD60x18;
            let expr = convert_uint256_to_uint256(var_x, context)?;
            var_result = expr;
            Ok(var_result)
        }

        pub fn zero_value_for_split_struct_Set<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = allocate_and_zero_memory_struct_struct_Set(context)?;
            Ok(ret)
        }

        pub fn fun_set<CI>(var_x: U256, var_expected: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_1918_mpos = U256::ZERO;
            let zero_struct_Set_mpos = zero_value_for_split_struct_Set(context)?;
            var_1918_mpos = zero_struct_Set_mpos;
            let expr = constant_ZERO(context)?;
            let expr_1 = fun_ud(var_expected, context)?;
            let expr_1926_mpos = allocate_memory_struct_struct_Set_storage_ptr(context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_1926_mpos, U256::from(0x0u128), context)?, var_x, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_1926_mpos, U256::from(0x20u128), context)?, expr, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_1926_mpos, U256::from(0x40u128), context)?, expr_1, context)?;
            var_1918_mpos = expr_1926_mpos;
            Ok(var_1918_mpos)
        }

        pub fn fun_set_1889<CI>(var_x: U256, var_expected: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_mpos = U256::ZERO;
            let zero_struct_Set_memory_ptr_mpos = zero_value_for_split_struct_Set(context)?;
            var_mpos = zero_struct_Set_memory_ptr_mpos;
            let expr = fun_ud(var_x, context)?;
            let expr_1 = constant_ZERO(context)?;
            let expr_2 = fun_ud(var_expected, context)?;
            let expr_mpos = allocate_memory_struct_struct_Set_storage_ptr(context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_mpos, U256::from(0x0u128), context)?, expr, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_mpos, U256::from(0x20u128), context)?, expr_1, context)?;
            write_to_memory_userDefinedValueType_UD60x18(add(expr_mpos, U256::from(0x40u128), context)?, expr_2, context)?;
            var_mpos = expr_mpos;
            Ok(var_mpos)
        }

        pub fn storage_set_to_zero_array_struct_Set__dyn<CI>(slot: U256, offset: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if iszero(eq(offset, U256::from(0x0u128), context)?, context)? != U256::ZERO {
                panic_error_0x00(context)?;
            }
            clear_storage_array_array_struct_Set__dyn(slot, context)?;
            Ok(())
        }

        pub fn zero_value_for_split_array_struct_Set_dyn<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut ret = U256::ZERO;
            ret = U256::from(0x60u128);
            Ok(ret)
        }

        pub fn fun_exp_Sets<CI>(context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var__mpos = U256::ZERO;
            let zero_array_struct_Set_dyn_mpos = zero_value_for_split_array_struct_Set_dyn(context)?;
            var__mpos = zero_array_struct_Set_dyn_mpos;
            storage_set_to_zero_array_struct_Set__dyn(U256::from(0xfu128), U256::from(0x0u128), context)?;
            let _slot = U256::from(0xfu128);
            let expr_self_slot = convert_array_array_struct_Set_storage_dyn_storage_to_array_struct_Set__dyn_ptr(_slot, context)?;
            let expr = U256::from(0xde0b6b3a7640000u128);
            let _1 = convert_rational_1_by_1_to_uint256(U256::from(0x1u128), context)?;
            let _2 = convert_rational_1000000000000000000_by_1_to_uint256(expr, context)?;
            let expr_100_mpos = fun_set_1889(_1, _2, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_100_mpos, context)?;
            let _3 = convert_rational_1000_by_1_to_uint256(U256::from(0x3e8u128), context)?;
            let _4 = convert_rational_1000000000000000999_by_1_to_uint256(U256::from(0xde0b6b3a76403e7u128), context)?;
            let expr_109_mpos = fun_set_1889(_3, _4, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_109_mpos, context)?;
            let _5 = convert_rational_2718281828459045234_by_1_to_uint256(U256::from(0x25b946ebc0b36172u128), context)?;
            let expr_118_mpos = fun_set_1889(_2, _5, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_118_mpos, context)?;
            let _6 = convert_rational_2000000000000000000_by_1_to_uint256(U256::from(0x1bc16d674ec80000u128), context)?;
            let _7 = convert_rational_7389056098930650223_by_1_to_uint256(U256::from(0x668b335f8231ec6fu128), context)?;
            let expr_127_mpos = fun_set_1889(_6, _7, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_127_mpos, context)?;
            let expr_1 = constant_E(context)?;
            let _8 = convert_rational_15154262241479264171_by_1_to_uint256(U256::from(0xd24ec137c87c87abu128), context)?;
            let expr_136_mpos = fun_set(expr_1, _8, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_136_mpos, context)?;
            let _9 = convert_rational_3000000000000000000_by_1_to_uint256(U256::from(0x29a2241af62c0000u128), context)?;
            let _10 = convert_rational_20085536923187667724_by_1_to_uint256(U256::from(0x116be2969f597e30cu128), context)?;
            let expr_145_mpos = fun_set_1889(_9, _10, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_145_mpos, context)?;
            let expr_2 = constant_PI(context)?;
            let _11 = convert_rational_23140692632779268962_by_1_to_uint256(U256::from(0x141244158494ea362u128), context)?;
            let expr_154_mpos = fun_set(expr_2, _11, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_154_mpos, context)?;
            let _12 = convert_rational_4000000000000000000_by_1_to_uint256(U256::from(0x3782dace9d900000u128), context)?;
            let _13 = convert_rational_54598150033144239019_by_1_to_uint256(U256::from(0x2f5b3982e870b53abu128), context)?;
            let expr_163_mpos = fun_set_1889(_12, _13, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_163_mpos, context)?;
            let _14 = convert_rational_11892150000000000000_by_1_to_uint256(U256::from(0xa509676aeda96000u128), context)?;
            let _15 = convert_t_rational_by_to_t_uint256(U256::from(0x1ef0ea7657ddddc32e4eu128), context)?;
            let expr_172_mpos = fun_set_1889(_14, _15, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_172_mpos, context)?;
            let _16 = convert_rational_16000000000000000000_by_1_to_uint256(U256::from(0xde0b6b3a76400000u128), context)?;
            let _17 = convert_rational_8886110520507872601090007_by_1_to_uint256(U256::from(0x759b5043d8a9673e6a7d7u128), context)?;
            let expr_181_mpos = fun_set_1889(_16, _17, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_181_mpos, context)?;
            let _18 = convert_rational_20820000000000000000_by_1_to_uint256(U256::from(0x120ef7fb0dfa20000u128), context)?;
            let _19 = convert_rational_1101567497354306722521735975_by_1_to_uint256(U256::from(0x38f31fdb044ae1bbbf4e327u128), context)?;
            let expr_190_mpos = fun_set_1889(_18, _19, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_190_mpos, context)?;
            let _20 = convert_rational_33333333000000000000_by_1_to_uint256(U256::from(0x1ce97c9c184ce5000u128), context)?;
            let _21 = convert_rational_299559147061116199277615819889397_by_1_to_uint256(U256::from(0xec4f7cec30a583ebd883f119af5u128), context)?;
            let expr_199_mpos = fun_set_1889(_20, _21, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_199_mpos, context)?;
            let _22 = convert_rational_64000000000000000000_by_1_to_uint256(U256::from(0x3782dace9d9000000u128), context)?;
            let _23 = convert_rational_6235149080811616783682415370612321304359995711_by_1_to_uint256(U256::from_be_slice(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x17, 0x98, 0x00, 0x4d, 0x75, 0x5d, 0x3b, 0x4b, 0x29, 0xbd, 0xd4, 0xbc, 0x37, 0x53, 0x97, 0xc0, 0xb0, 0x09, 0x3f]), context)?;
            let expr_208_mpos = fun_set_1889(_22, _23, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_208_mpos, context)?;
            let _24 = convert_rational_71002000000000000000_by_1_to_uint256(U256::from(0x3d959c6d0b6490000u128), context)?;
            let _25 = convert_rational_6851360256686183998595702657852843771046889809565_by_1_to_uint256(U256::from_be_slice(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x19, 0x9e, 0x90, 0xf5, 0x16, 0x07, 0xdf, 0xc2, 0xfa, 0xa1, 0x44, 0x7a, 0xef, 0x85, 0x6f, 0x99, 0x10, 0x66, 0x9d]), context)?;
            let expr_217_mpos = fun_set_1889(_24, _25, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_217_mpos, context)?;
            let _26 = convert_rational_88722839111672999627_by_1_to_uint256(U256::from(0x4cf46d8192b672ecbu128), context)?;
            let _27 = convert_rational_340282366920938463222979506443879150094819893272894857679_by_1_to_uint256(U256::from_be_slice(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xe0, 0xb6, 0xb3, 0xa7, 0x63, 0xff, 0xff, 0x4b, 0x25, 0x96, 0x70, 0x62, 0x4a, 0xfa, 0x56, 0xb1, 0xa2, 0x7f, 0x70, 0x24, 0x19, 0x61, 0xcf]), context)?;
            let expr_226_mpos = fun_set_1889(_26, _27, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_226_mpos, context)?;
            let expr_3 = constant_EXP_MAX_INPUT(context)?;
            let _28 = convert_rational_6277101735386680754977611748738314679353920434623901771623000000000000000000_by_1_to_uint256(U256::from_be_slice(&[0x0d, 0xe0, 0xb6, 0xb3, 0xa7, 0x63, 0xff, 0xfe, 0x96, 0xbc, 0x4f, 0x50, 0xe2, 0x36, 0xfa, 0x6e, 0x83, 0xba, 0x8d, 0x35, 0xb1, 0xc2, 0xa9, 0x6a, 0x01, 0xa2, 0x7c, 0x52, 0x95, 0x3c, 0x00, 0x00]), context)?;
            let expr_235_mpos = fun_set(expr_3, _28, context)?;
            array_push_from_struct_Set_to_array_struct_Set_storage_dyn_ptr(expr_self_slot, expr_235_mpos, context)?;
            var__mpos = convert_array_array_struct_Set_storage_dyn_to_array_struct_Set_dyn(_slot, context)?;
            Ok(var__mpos)
        }

        pub fn memory_array_index_access_struct_Set_dyn<CI>(baseRef: U256, index: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut addr = U256::ZERO;
            if iszero(lt(index, array_length_array_struct_Set_dyn(baseRef, context)?, context)?, context)? != U256::ZERO {
                panic_error_0x32(context)?;
            }
            let mut offset = mul(index, U256::from(0x20u128), context)?;
            offset = add(offset, U256::from(0x20u128), context)?;
            addr = add(baseRef, offset, context)?;
            Ok(addr)
        }

        pub fn fun_assertEq_16568<CI>(var_left: U256, var_right: U256, var_err_16556_mpos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let expr_16559_address = constant_vm_16269(context)?;
            let expr_16561_address = convert_contract_Vm_to_address(expr_16559_address, context)?;
            if iszero(extcodesize(expr_16561_address, context)?, context)? != U256::ZERO {
                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20(context)?;
            }
            let _1 = allocate_unbounded(context)?;
            mstore(_1, shift_left_224(U256::from(0x88b44c85u128), context)?, context)?;
            let _2 = abi_encode_uint256_uint256_string(add(_1, U256::from(0x4u128), context)?, var_left, var_right, var_err_16556_mpos, context)?;
            let _3 = staticcall(gas(context)?, expr_16561_address, _1, sub(_2, _1, context)?, _1, U256::from(0x0u128), context)?;
            if iszero(_3, context)? != U256::ZERO {
                revert_forward(context)?;
            }
            if _3 != U256::ZERO {
                let mut _4 = U256::from(0x0u128);
                if gt(U256::from(0x0u128), returndatasize(context)?, context)? != U256::ZERO {
                    _4 = returndatasize(context)?;
                }
                finalize_allocation(_1, _4, context)?;
                abi_decode_fromMemory(_1, add(_1, _4, context)?, context)?;
            }
            Ok(())
        }

        pub fn fun_assertEq<CI>(var_a: U256, var_b: U256, var_err_mpos: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let expr = convert_uint256_to_uint256(var_a, context)?;
            let expr_1 = convert_uint256_to_uint256(var_b, context)?;
            fun_assertEq_16568(expr, expr_1, var_err_mpos, context)?;
            Ok(())
        }

        pub fn shift_right_unsigned_dynamic<CI>(bits: U256, value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shr(bits, value, context)?;
            Ok(newValue)
        }

        pub fn shift_right_uint256_uint256<CI>(value: U256, mut bits: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            bits = cleanup_uint256(bits, context)?;
            result = cleanup_uint256(shift_right_unsigned_dynamic(bits, cleanup_uint256(value, context)?, context)?, context)?;
            Ok(result)
        }

        pub fn shift_right_uint256_uint8<CI>(value: U256, mut bits: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            bits = cleanup_uint8(bits, context)?;
            result = cleanup_uint256(shift_right_unsigned_dynamic(bits, cleanup_uint256(value, context)?, context)?, context)?;
            Ok(result)
        }

        pub fn wrapping_mul_uint256<CI>(x: U256, y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut product = U256::ZERO;
            product = cleanup_uint256(mul(x, y, context)?, context)?;
            Ok(product)
        }

        pub fn wrapping_sub_uint256<CI>(x: U256, y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut diff = U256::ZERO;
            diff = cleanup_uint256(sub(x, y, context)?, context)?;
            Ok(diff)
        }

        pub fn fun_exp2<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_t_uint256 = zero_value_for_split_uint256(context)?;
            var_result = zero_t_uint256;
            let _1 = convert_rational_3138550867693340381917894711603833208051177722232017256448_by_1_to_uint256(shl(U256::from(0xbfu128), U256::from(0x1u128), context)?, context)?;
            var_result = _1;
            let expr = and(var_x, convert_rational_18374686479671623680_by_1_to_uint256(U256::from(0xff00000000000000u128), context)?, context)?;
            let expr_1 = gt(cleanup_uint256(expr, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_1 != U256::ZERO {
                let expr_2 = and(var_x, convert_rational_9223372036854775808_by_1_to_uint256(U256::from(0x8000000000000000u128), context)?, context)?;
                let expr_3 = gt(cleanup_uint256(expr_2, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_3 != U256::ZERO {
                    let expr_4 = wrapping_mul_uint256(_1, convert_rational_26087635650665564425_by_1_to_uint256(U256::from(0x16a09e667f3bcc909u128), context)?, context)?;
                    let _2 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_5 = shift_right_uint256_uint8(expr_4, _2, context)?;
                    var_result = expr_5;
                }
                let expr_6 = and(var_x, convert_rational_4611686018427387904_by_1_to_uint256(U256::from(0x4000000000000000u128), context)?, context)?;
                let expr_7 = gt(cleanup_uint256(expr_6, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_7 != U256::ZERO {
                    let expr_8 = wrapping_mul_uint256(var_result, convert_rational_21936999301089678047_by_1_to_uint256(U256::from(0x1306fe0a31b7152dfu128), context)?, context)?;
                    let _3 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_9 = shift_right_uint256_uint8(expr_8, _3, context)?;
                    var_result = expr_9;
                }
                let expr_10 = and(var_x, convert_rational_2305843009213693952_by_1_to_uint256(U256::from(0x2000000000000000u128), context)?, context)?;
                let expr_11 = gt(cleanup_uint256(expr_10, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_11 != U256::ZERO {
                    let expr_12 = wrapping_mul_uint256(var_result, convert_rational_20116317054877281742_by_1_to_uint256(U256::from(0x1172b83c7d517adceu128), context)?, context)?;
                    let _4 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_13 = shift_right_uint256_uint8(expr_12, _4, context)?;
                    var_result = expr_13;
                }
                let expr_14 = and(var_x, convert_rational_1152921504606846976_by_1_to_uint256(U256::from(0x1000000000000000u128), context)?, context)?;
                let expr_15 = gt(cleanup_uint256(expr_14, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_15 != U256::ZERO {
                    let expr_16 = wrapping_mul_uint256(var_result, convert_rational_by_to_uint256(U256::from(0x10b5586cf9890f62au128), context)?, context)?;
                    let _5 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_17 = shift_right_uint256_uint8(expr_16, _5, context)?;
                    var_result = expr_17;
                }
                let expr_18 = and(var_x, convert_rational_576460752303423488_by_1_to_uint256(U256::from(0x800000000000000u128), context)?, context)?;
                let expr_19 = gt(cleanup_uint256(expr_18, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_19 != U256::ZERO {
                    let expr_20 = wrapping_mul_uint256(var_result, convert_rational_18850675170876015534_by_1_to_uint256(U256::from(0x1059b0d31585743aeu128), context)?, context)?;
                    let _6 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_21 = shift_right_uint256_uint8(expr_20, _6, context)?;
                    var_result = expr_21;
                }
                let expr_22 = and(var_x, convert_rational_288230376151711744_by_1_to_uint256(U256::from(0x400000000000000u128), context)?, context)?;
                let expr_23 = gt(cleanup_uint256(expr_22, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_23 != U256::ZERO {
                    let expr_24 = wrapping_mul_uint256(var_result, convert_rational_18647615946650685159_by_1_to_uint256(U256::from(0x102c9a3e778060ee7u128), context)?, context)?;
                    let _7 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_25 = shift_right_uint256_uint8(expr_24, _7, context)?;
                    var_result = expr_25;
                }
                let expr_26 = and(var_x, convert_rational_144115188075855872_by_1_to_uint256(U256::from(0x200000000000000u128), context)?, context)?;
                let expr_27 = gt(cleanup_uint256(expr_26, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_27 != U256::ZERO {
                    let expr_28 = wrapping_mul_uint256(var_result, convert_rational_18546908069882975960_by_1_to_uint256(U256::from(0x10163da9fb33356d8u128), context)?, context)?;
                    let _8 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_29 = shift_right_uint256_uint8(expr_28, _8, context)?;
                    var_result = expr_29;
                }
                let expr_30 = and(var_x, convert_rational_72057594037927936_by_1_to_uint256(U256::from(0x100000000000000u128), context)?, context)?;
                let expr_31 = gt(cleanup_uint256(expr_30, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_31 != U256::ZERO {
                    let expr_32 = wrapping_mul_uint256(var_result, convert_rational_18496758270674070881_by_1_to_uint256(U256::from(0x100b1afa5abcbed61u128), context)?, context)?;
                    let _9 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_33 = shift_right_uint256_uint8(expr_32, _9, context)?;
                    var_result = expr_33;
                }
            }
            let expr_34 = and(var_x, convert_rational_71776119061217280_by_1_to_uint256(U256::from(0xff000000000000u128), context)?, context)?;
            let expr_35 = gt(cleanup_uint256(expr_34, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_35 != U256::ZERO {
                let expr_36 = and(var_x, convert_rational_36028797018963968_by_1_to_uint256(U256::from(0x80000000000000u128), context)?, context)?;
                let expr_37 = gt(cleanup_uint256(expr_36, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_37 != U256::ZERO {
                    let expr_38 = wrapping_mul_uint256(var_result, convert_rational_18471734244850835106_by_1_to_uint256(U256::from(0x10058c86da1c09ea2u128), context)?, context)?;
                    let _10 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_39 = shift_right_uint256_uint8(expr_38, _10, context)?;
                    var_result = expr_39;
                }
                let expr_40 = and(var_x, convert_rational_18014398509481984_by_1_to_uint256(U256::from(0x40000000000000u128), context)?, context)?;
                let expr_41 = gt(cleanup_uint256(expr_40, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_41 != U256::ZERO {
                    let expr_42 = wrapping_mul_uint256(var_result, convert_rational_18459234930309000272_by_1_to_uint256(U256::from(0x1002c605e2e8cec50u128), context)?, context)?;
                    let _11 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_43 = shift_right_uint256_uint8(expr_42, _11, context)?;
                    var_result = expr_43;
                }
                let expr_44 = and(var_x, convert_rational_9007199254740992_by_1_to_uint256(U256::from(0x20000000000000u128), context)?, context)?;
                let expr_45 = gt(cleanup_uint256(expr_44, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_45 != U256::ZERO {
                    let expr_46 = wrapping_mul_uint256(var_result, convert_rational_18452988445124272033_by_1_to_uint256(U256::from(0x100162f3904051fa1u128), context)?, context)?;
                    let _12 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_47 = shift_right_uint256_uint8(expr_46, _12, context)?;
                    var_result = expr_47;
                }
                let expr_48 = and(var_x, convert_rational_4503599627370496_by_1_to_uint256(U256::from(0x10000000000000u128), context)?, context)?;
                let expr_49 = gt(cleanup_uint256(expr_48, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_49 != U256::ZERO {
                    let expr_50 = wrapping_mul_uint256(var_result, convert_rational_18449865995240371898_by_1_to_uint256(U256::from(0x1000b175effdc76bau128), context)?, context)?;
                    let _13 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_51 = shift_right_uint256_uint8(expr_50, _13, context)?;
                    var_result = expr_51;
                }
                let expr_52 = and(var_x, convert_rational_2251799813685248_by_1_to_uint256(U256::from(0x8000000000000u128), context)?, context)?;
                let expr_53 = gt(cleanup_uint256(expr_52, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_53 != U256::ZERO {
                    let expr_54 = wrapping_mul_uint256(var_result, convert_rational_18448304968436414829_by_1_to_uint256(U256::from(0x100058ba01fb9f96du128), context)?, context)?;
                    let _14 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_55 = shift_right_uint256_uint8(expr_54, _14, context)?;
                    var_result = expr_55;
                }
                let expr_56 = and(var_x, convert_rational_1125899906842624_by_1_to_uint256(U256::from(0x4000000000000u128), context)?, context)?;
                let expr_57 = gt(cleanup_uint256(expr_56, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_57 != U256::ZERO {
                    let expr_58 = wrapping_mul_uint256(var_result, convert_rational_18447524504564044946_by_1_to_uint256(U256::from(0x10002c5cc37da9492u128), context)?, context)?;
                    let _15 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_59 = shift_right_uint256_uint8(expr_58, _15, context)?;
                    var_result = expr_59;
                }
                let expr_60 = and(var_x, convert_rational_562949953421312_by_1_to_uint256(U256::from(0x2000000000000u128), context)?, context)?;
                let expr_61 = gt(cleanup_uint256(expr_60, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_61 != U256::ZERO {
                    let expr_62 = wrapping_mul_uint256(var_result, convert_rational_18447134285009651015_by_1_to_uint256(U256::from(0x1000162e525ee0547u128), context)?, context)?;
                    let _16 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_63 = shift_right_uint256_uint8(expr_62, _16, context)?;
                    var_result = expr_63;
                }
                let expr_64 = and(var_x, convert_rational_281474976710656_by_1_to_uint256(U256::from(0x1000000000000u128), context)?, context)?;
                let expr_65 = gt(cleanup_uint256(expr_64, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_65 != U256::ZERO {
                    let expr_66 = wrapping_mul_uint256(var_result, convert_rational_18446939178327825412_by_1_to_uint256(U256::from(0x10000b17255775c04u128), context)?, context)?;
                    let _17 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_67 = shift_right_uint256_uint8(expr_66, _17, context)?;
                    var_result = expr_67;
                }
            }
            let expr_68 = and(var_x, convert_rational_280375465082880_by_1_to_uint256(U256::from(0xff0000000000u128), context)?, context)?;
            let expr_69 = gt(cleanup_uint256(expr_68, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_69 != U256::ZERO {
                let expr_70 = and(var_x, convert_rational_140737488355328_by_1_to_uint256(U256::from(0x800000000000u128), context)?, context)?;
                let expr_71 = gt(cleanup_uint256(expr_70, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_71 != U256::ZERO {
                    let expr_72 = wrapping_mul_uint256(var_result, convert_rational_18446841625760745902_by_1_to_uint256(U256::from(0x1000058b91b5bc9aeu128), context)?, context)?;
                    let _18 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_73 = shift_right_uint256_uint8(expr_72, _18, context)?;
                    var_result = expr_73;
                }
                let expr_74 = and(var_x, convert_rational_70368744177664_by_1_to_uint256(U256::from(0x400000000000u128), context)?, context)?;
                let expr_75 = gt(cleanup_uint256(expr_74, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_75 != U256::ZERO {
                    let expr_76 = wrapping_mul_uint256(var_result, convert_rational_18446792849670663277_by_1_to_uint256(U256::from(0x100002c5c89d5ec6du128), context)?, context)?;
                    let _19 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_77 = shift_right_uint256_uint8(expr_76, _19, context)?;
                    var_result = expr_77;
                }
                let expr_78 = and(var_x, convert_rational_35184372088832_by_1_to_uint256(U256::from(0x200000000000u128), context)?, context)?;
                let expr_79 = gt(cleanup_uint256(expr_78, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_79 != U256::ZERO {
                    let expr_80 = wrapping_mul_uint256(var_result, convert_rational_18446768461673986097_by_1_to_uint256(U256::from(0x10000162e43f4f831u128), context)?, context)?;
                    let _20 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_81 = shift_right_uint256_uint8(expr_80, _20, context)?;
                    var_result = expr_81;
                }
                let expr_82 = and(var_x, convert_rational_17592186044416_by_1_to_uint256(U256::from(0x100000000000u128), context)?, context)?;
                let expr_83 = gt(cleanup_uint256(expr_82, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_83 != U256::ZERO {
                    let expr_84 = wrapping_mul_uint256(var_result, convert_rational_18446756267687738522_by_1_to_uint256(U256::from(0x100000b1721bcfc9au128), context)?, context)?;
                    let _21 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_85 = shift_right_uint256_uint8(expr_84, _21, context)?;
                    var_result = expr_85;
                }
                let expr_86 = and(var_x, convert_rational_8796093022208_by_1_to_uint256(U256::from(0x80000000000u128), context)?, context)?;
                let expr_87 = gt(cleanup_uint256(expr_86, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_87 != U256::ZERO {
                    let expr_88 = wrapping_mul_uint256(var_result, convert_rational_18446750170697637486_by_1_to_uint256(U256::from(0x10000058b90cf1e6eu128), context)?, context)?;
                    let _22 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_89 = shift_right_uint256_uint8(expr_88, _22, context)?;
                    var_result = expr_89;
                }
                let expr_90 = and(var_x, convert_rational_4398046511104_by_1_to_uint256(U256::from(0x40000000000u128), context)?, context)?;
                let expr_91 = gt(cleanup_uint256(expr_90, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_91 != U256::ZERO {
                    let expr_92 = wrapping_mul_uint256(var_result, convert_rational_18446747122203342655_by_1_to_uint256(U256::from(0x1000002c5c863b73fu128), context)?, context)?;
                    let _23 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_93 = shift_right_uint256_uint8(expr_92, _23, context)?;
                    var_result = expr_93;
                }
                let expr_94 = and(var_x, convert_rational_2199023255552_by_1_to_uint256(U256::from(0x20000000000u128), context)?, context)?;
                let expr_95 = gt(cleanup_uint256(expr_94, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_95 != U256::ZERO {
                    let expr_96 = wrapping_mul_uint256(var_result, convert_rational_18446745597956384162_by_1_to_uint256(U256::from(0x100000162e430e5a2u128), context)?, context)?;
                    let _24 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_97 = shift_right_uint256_uint8(expr_96, _24, context)?;
                    var_result = expr_97;
                }
                let expr_98 = and(var_x, convert_rational_1099511627776_by_1_to_uint256(U256::from(0x10000000000u128), context)?, context)?;
                let expr_99 = gt(cleanup_uint256(expr_98, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_99 != U256::ZERO {
                    let expr_100 = wrapping_mul_uint256(var_result, convert_rational_18446744835832952145_by_1_to_uint256(U256::from(0x1000000b172183551u128), context)?, context)?;
                    let _25 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_101 = shift_right_uint256_uint8(expr_100, _25, context)?;
                    var_result = expr_101;
                }
            }
            let expr_102 = and(var_x, convert_rational_1095216660480_by_1_to_uint256(U256::from(0xff00000000u128), context)?, context)?;
            let expr_103 = gt(cleanup_uint256(expr_102, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_103 != U256::ZERO {
                let expr_104 = and(var_x, convert_rational_549755813888_by_1_to_uint256(U256::from(0x8000000000u128), context)?, context)?;
                let expr_105 = gt(cleanup_uint256(expr_104, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_105 != U256::ZERO {
                    let expr_106 = wrapping_mul_uint256(var_result, convert_rational_18446744454771247945_by_1_to_uint256(U256::from(0x100000058b90c0b49u128), context)?, context)?;
                    let _26 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_107 = shift_right_uint256_uint8(expr_106, _26, context)?;
                    var_result = expr_107;
                }
                let expr_108 = and(var_x, convert_rational_274877906944_by_1_to_uint256(U256::from(0x4000000000u128), context)?, context)?;
                let expr_109 = gt(cleanup_uint256(expr_108, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_109 != U256::ZERO {
                    let expr_110 = wrapping_mul_uint256(var_result, convert_rational_18446744264240398796_by_1_to_uint256(U256::from(0x10000002c5c8601ccu128), context)?, context)?;
                    let _27 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_111 = shift_right_uint256_uint8(expr_110, _27, context)?;
                    var_result = expr_111;
                }
                let expr_112 = and(var_x, convert_rational_137438953472_by_1_to_uint256(U256::from(0x2000000000u128), context)?, context)?;
                let expr_113 = gt(cleanup_uint256(expr_112, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_113 != U256::ZERO {
                    let expr_114 = wrapping_mul_uint256(var_result, convert_rational_18446744168974974960_by_1_to_uint256(U256::from(0x1000000162e42fff0u128), context)?, context)?;
                    let _28 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_115 = shift_right_uint256_uint8(expr_114, _28, context)?;
                    var_result = expr_115;
                }
                let expr_116 = and(var_x, convert_rational_68719476736_by_1_to_uint256(U256::from(0x1000000000u128), context)?, context)?;
                let expr_117 = gt(cleanup_uint256(expr_116, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_117 != U256::ZERO {
                    let expr_118 = wrapping_mul_uint256(var_result, convert_rational_18446744121342263227_by_1_to_uint256(U256::from(0x10000000b17217fbbu128), context)?, context)?;
                    let _29 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_119 = shift_right_uint256_uint8(expr_118, _29, context)?;
                    var_result = expr_119;
                }
                let expr_120 = and(var_x, convert_rational_34359738368_by_1_to_uint256(U256::from(0x800000000u128), context)?, context)?;
                let expr_121 = gt(cleanup_uint256(expr_120, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_121 != U256::ZERO {
                    let expr_122 = wrapping_mul_uint256(var_result, convert_rational_18446744097525907406_by_1_to_uint256(U256::from(0x1000000058b90bfceu128), context)?, context)?;
                    let _30 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_123 = shift_right_uint256_uint8(expr_122, _30, context)?;
                    var_result = expr_123;
                }
                let expr_124 = and(var_x, convert_rational_17179869184_by_1_to_uint256(U256::from(0x400000000u128), context)?, context)?;
                let expr_125 = gt(cleanup_uint256(expr_124, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_125 != U256::ZERO {
                    let expr_126 = wrapping_mul_uint256(var_result, convert_rational_18446744085617729507_by_1_to_uint256(U256::from(0x100000002c5c85fe3u128), context)?, context)?;
                    let _31 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_127 = shift_right_uint256_uint8(expr_126, _31, context)?;
                    var_result = expr_127;
                }
                let expr_128 = and(var_x, convert_rational_8589934592_by_1_to_uint256(U256::from(0x200000000u128), context)?, context)?;
                let expr_129 = gt(cleanup_uint256(expr_128, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_129 != U256::ZERO {
                    let expr_130 = wrapping_mul_uint256(var_result, convert_rational_18446744079663640561_by_1_to_uint256(U256::from(0x10000000162e42ff1u128), context)?, context)?;
                    let _32 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_131 = shift_right_uint256_uint8(expr_130, _32, context)?;
                    var_result = expr_131;
                }
                let expr_132 = and(var_x, convert_rational_4294967296_by_1_to_uint256(U256::from(0x100000000u128), context)?, context)?;
                let expr_133 = gt(cleanup_uint256(expr_132, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_133 != U256::ZERO {
                    let expr_134 = wrapping_mul_uint256(var_result, convert_rational_18446744076686596088_by_1_to_uint256(U256::from(0x100000000b17217f8u128), context)?, context)?;
                    let _33 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_135 = shift_right_uint256_uint8(expr_134, _33, context)?;
                    var_result = expr_135;
                }
            }
            let expr_136 = and(var_x, convert_rational_4278190080_by_1_to_uint256(U256::from(0xff000000u128), context)?, context)?;
            let expr_137 = gt(cleanup_uint256(expr_136, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_137 != U256::ZERO {
                let expr_138 = and(var_x, convert_rational_2147483648_by_1_to_uint256(U256::from(0x80000000u128), context)?, context)?;
                let expr_139 = gt(cleanup_uint256(expr_138, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_139 != U256::ZERO {
                    let expr_140 = wrapping_mul_uint256(var_result, convert_rational_18446744075198073852_by_1_to_uint256(U256::from(0x10000000058b90bfcu128), context)?, context)?;
                    let _34 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_141 = shift_right_uint256_uint8(expr_140, _34, context)?;
                    var_result = expr_141;
                }
                let expr_142 = and(var_x, convert_rational_1073741824_by_1_to_uint256(U256::from(0x40000000u128), context)?, context)?;
                let expr_143 = gt(cleanup_uint256(expr_142, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_143 != U256::ZERO {
                    let expr_144 = wrapping_mul_uint256(var_result, convert_rational_18446744074453812734_by_1_to_uint256(U256::from(0x1000000002c5c85feu128), context)?, context)?;
                    let _35 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_145 = shift_right_uint256_uint8(expr_144, _35, context)?;
                    var_result = expr_145;
                }
                let expr_146 = and(var_x, convert_rational_536870912_by_1_to_uint256(U256::from(0x20000000u128), context)?, context)?;
                let expr_147 = gt(cleanup_uint256(expr_146, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_147 != U256::ZERO {
                    let expr_148 = wrapping_mul_uint256(var_result, convert_rational_18446744074081682175_by_1_to_uint256(U256::from(0x100000000162e42ffu128), context)?, context)?;
                    let _36 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_149 = shift_right_uint256_uint8(expr_148, _36, context)?;
                    var_result = expr_149;
                }
                let expr_150 = and(var_x, convert_rational_268435456_by_1_to_uint256(U256::from(0x10000000u128), context)?, context)?;
                let expr_151 = gt(cleanup_uint256(expr_150, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_151 != U256::ZERO {
                    let expr_152 = wrapping_mul_uint256(var_result, convert_rational_18446744073895616895_by_1_to_uint256(U256::from(0x1000000000b17217fu128), context)?, context)?;
                    let _37 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_153 = shift_right_uint256_uint8(expr_152, _37, context)?;
                    var_result = expr_153;
                }
                let expr_154 = and(var_x, convert_rational_134217728_by_1_to_uint256(U256::from(0x8000000u128), context)?, context)?;
                let expr_155 = gt(cleanup_uint256(expr_154, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_155 != U256::ZERO {
                    let expr_156 = wrapping_mul_uint256(var_result, convert_rational_18446744073802584256_by_1_to_uint256(U256::from(0x100000000058b90c0u128), context)?, context)?;
                    let _38 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_157 = shift_right_uint256_uint8(expr_156, _38, context)?;
                    var_result = expr_157;
                }
                let expr_158 = and(var_x, convert_rational_67108864_by_1_to_uint256(U256::from(0x4000000u128), context)?, context)?;
                let expr_159 = gt(cleanup_uint256(expr_158, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_159 != U256::ZERO {
                    let expr_160 = wrapping_mul_uint256(var_result, convert_rational_18446744073756067936_by_1_to_uint256(U256::from(0x10000000002c5c860u128), context)?, context)?;
                    let _39 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_161 = shift_right_uint256_uint8(expr_160, _39, context)?;
                    var_result = expr_161;
                }
                let expr_162 = and(var_x, convert_rational_33554432_by_1_to_uint256(U256::from(0x2000000u128), context)?, context)?;
                let expr_163 = gt(cleanup_uint256(expr_162, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_163 != U256::ZERO {
                    let expr_164 = wrapping_mul_uint256(var_result, convert_rational_18446744073732809776_by_1_to_uint256(U256::from(0x1000000000162e430u128), context)?, context)?;
                    let _40 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_165 = shift_right_uint256_uint8(expr_164, _40, context)?;
                    var_result = expr_165;
                }
                let expr_166 = and(var_x, convert_rational_16777216_by_1_to_uint256(U256::from(0x1000000u128), context)?, context)?;
                let expr_167 = gt(cleanup_uint256(expr_166, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_167 != U256::ZERO {
                    let expr_168 = wrapping_mul_uint256(var_result, convert_rational_18446744073721180696_by_1_to_uint256(U256::from(0x10000000000b17218u128), context)?, context)?;
                    let _41 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_169 = shift_right_uint256_uint8(expr_168, _41, context)?;
                    var_result = expr_169;
                }
            }
            let expr_170 = and(var_x, convert_rational_16711680_by_1_to_uint256(U256::from(0xff0000u128), context)?, context)?;
            let expr_171 = gt(cleanup_uint256(expr_170, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_171 != U256::ZERO {
                let expr_172 = and(var_x, convert_rational_8388608_by_1_to_uint256(U256::from(0x800000u128), context)?, context)?;
                let expr_173 = gt(cleanup_uint256(expr_172, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_173 != U256::ZERO {
                    let expr_174 = wrapping_mul_uint256(var_result, convert_rational_18446744073715366156_by_1_to_uint256(U256::from(0x1000000000058b90cu128), context)?, context)?;
                    let _42 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_175 = shift_right_uint256_uint8(expr_174, _42, context)?;
                    var_result = expr_175;
                }
                let expr_176 = and(var_x, convert_rational_4194304_by_1_to_uint256(U256::from(0x400000u128), context)?, context)?;
                let expr_177 = gt(cleanup_uint256(expr_176, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_177 != U256::ZERO {
                    let expr_178 = wrapping_mul_uint256(var_result, convert_rational_18446744073712458886_by_1_to_uint256(U256::from(0x100000000002c5c86u128), context)?, context)?;
                    let _43 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_179 = shift_right_uint256_uint8(expr_178, _43, context)?;
                    var_result = expr_179;
                }
                let expr_180 = and(var_x, convert_rational_2097152_by_1_to_uint256(U256::from(0x200000u128), context)?, context)?;
                let expr_181 = gt(cleanup_uint256(expr_180, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_181 != U256::ZERO {
                    let expr_182 = wrapping_mul_uint256(var_result, convert_rational_18446744073711005251_by_1_to_uint256(U256::from(0x10000000000162e43u128), context)?, context)?;
                    let _44 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_183 = shift_right_uint256_uint8(expr_182, _44, context)?;
                    var_result = expr_183;
                }
                let expr_184 = and(var_x, convert_rational_1048576_by_1_to_uint256(U256::from(0x100000u128), context)?, context)?;
                let expr_185 = gt(cleanup_uint256(expr_184, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_185 != U256::ZERO {
                    let expr_186 = wrapping_mul_uint256(var_result, convert_rational_18446744073710278433_by_1_to_uint256(U256::from(0x100000000000b1721u128), context)?, context)?;
                    let _45 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_187 = shift_right_uint256_uint8(expr_186, _45, context)?;
                    var_result = expr_187;
                }
                let expr_188 = and(var_x, convert_rational_524288_by_1_to_uint256(U256::from(0x80000u128), context)?, context)?;
                let expr_189 = gt(cleanup_uint256(expr_188, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_189 != U256::ZERO {
                    let expr_190 = wrapping_mul_uint256(var_result, convert_rational_18446744073709915025_by_1_to_uint256(U256::from(0x10000000000058b91u128), context)?, context)?;
                    let _46 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_191 = shift_right_uint256_uint8(expr_190, _46, context)?;
                    var_result = expr_191;
                }
                let expr_192 = and(var_x, convert_rational_262144_by_1_to_uint256(U256::from(0x40000u128), context)?, context)?;
                let expr_193 = gt(cleanup_uint256(expr_192, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_193 != U256::ZERO {
                    let expr_194 = wrapping_mul_uint256(var_result, convert_rational_18446744073709733320_by_1_to_uint256(U256::from(0x1000000000002c5c8u128), context)?, context)?;
                    let _47 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_195 = shift_right_uint256_uint8(expr_194, _47, context)?;
                    var_result = expr_195;
                }
                let expr_196 = and(var_x, convert_rational_131072_by_1_to_uint256(U256::from(0x20000u128), context)?, context)?;
                let expr_197 = gt(cleanup_uint256(expr_196, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_197 != U256::ZERO {
                    let expr_198 = wrapping_mul_uint256(var_result, convert_rational_18446744073709642468_by_1_to_uint256(U256::from(0x100000000000162e4u128), context)?, context)?;
                    let _48 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_199 = shift_right_uint256_uint8(expr_198, _48, context)?;
                    var_result = expr_199;
                }
                let expr_200 = and(var_x, convert_rational_65536_by_1_to_uint256(U256::from(0x10000u128), context)?, context)?;
                let expr_201 = gt(cleanup_uint256(expr_200, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_201 != U256::ZERO {
                    let expr_202 = wrapping_mul_uint256(var_result, convert_rational_18446744073709597042_by_1_to_uint256(U256::from(0x1000000000000b172u128), context)?, context)?;
                    let _49 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_203 = shift_right_uint256_uint8(expr_202, _49, context)?;
                    var_result = expr_203;
                }
            }
            let expr_204 = and(var_x, convert_rational_65280_by_1_to_uint256(U256::from(0xff00u128), context)?, context)?;
            let expr_205 = gt(cleanup_uint256(expr_204, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_205 != U256::ZERO {
                let expr_206 = and(var_x, convert_rational_32768_by_1_to_uint256(U256::from(0x8000u128), context)?, context)?;
                let expr_207 = gt(cleanup_uint256(expr_206, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_207 != U256::ZERO {
                    let expr_208 = wrapping_mul_uint256(var_result, convert_rational_18446744073709574329_by_1_to_uint256(U256::from(0x100000000000058b9u128), context)?, context)?;
                    let _50 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_209 = shift_right_uint256_uint8(expr_208, _50, context)?;
                    var_result = expr_209;
                }
                let expr_210 = and(var_x, convert_rational_16384_by_1_to_uint256(U256::from(0x4000u128), context)?, context)?;
                let expr_211 = gt(cleanup_uint256(expr_210, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_211 != U256::ZERO {
                    let expr_212 = wrapping_mul_uint256(var_result, convert_rational_18446744073709562973_by_1_to_uint256(U256::from(0x10000000000002c5du128), context)?, context)?;
                    let _51 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_213 = shift_right_uint256_uint8(expr_212, _51, context)?;
                    var_result = expr_213;
                }
                let expr_214 = and(var_x, convert_rational_8192_by_1_to_uint256(U256::from(0x2000u128), context)?, context)?;
                let expr_215 = gt(cleanup_uint256(expr_214, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_215 != U256::ZERO {
                    let expr_216 = wrapping_mul_uint256(var_result, convert_rational_18446744073709557294_by_1_to_uint256(U256::from(0x1000000000000162eu128), context)?, context)?;
                    let _52 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_217 = shift_right_uint256_uint8(expr_216, _52, context)?;
                    var_result = expr_217;
                }
                let expr_218 = and(var_x, convert_rational_4096_by_1_to_uint256(U256::from(0x1000u128), context)?, context)?;
                let expr_219 = gt(cleanup_uint256(expr_218, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_219 != U256::ZERO {
                    let expr_220 = wrapping_mul_uint256(var_result, convert_rational_18446744073709554455_by_1_to_uint256(U256::from(0x10000000000000b17u128), context)?, context)?;
                    let _53 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_221 = shift_right_uint256_uint8(expr_220, _53, context)?;
                    var_result = expr_221;
                }
                let expr_222 = and(var_x, convert_rational_2048_by_1_to_uint256(U256::from(0x800u128), context)?, context)?;
                let expr_223 = gt(cleanup_uint256(expr_222, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_223 != U256::ZERO {
                    let expr_224 = wrapping_mul_uint256(var_result, convert_rational_18446744073709553036_by_1_to_uint256(U256::from(0x1000000000000058cu128), context)?, context)?;
                    let _54 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_225 = shift_right_uint256_uint8(expr_224, _54, context)?;
                    var_result = expr_225;
                }
                let expr_226 = and(var_x, convert_rational_1024_by_1_to_uint256(U256::from(0x400u128), context)?, context)?;
                let expr_227 = gt(cleanup_uint256(expr_226, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_227 != U256::ZERO {
                    let expr_228 = wrapping_mul_uint256(var_result, convert_rational_18446744073709552326_by_1_to_uint256(U256::from(0x100000000000002c6u128), context)?, context)?;
                    let _55 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_229 = shift_right_uint256_uint8(expr_228, _55, context)?;
                    var_result = expr_229;
                }
                let expr_230 = and(var_x, convert_rational_512_by_1_to_uint256(U256::from(0x200u128), context)?, context)?;
                let expr_231 = gt(cleanup_uint256(expr_230, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_231 != U256::ZERO {
                    let expr_232 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551971_by_1_to_uint256(U256::from(0x10000000000000163u128), context)?, context)?;
                    let _56 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_233 = shift_right_uint256_uint8(expr_232, _56, context)?;
                    var_result = expr_233;
                }
                let expr_234 = and(var_x, convert_rational_256_by_1_to_uint256(U256::from(0x100u128), context)?, context)?;
                let expr_235 = gt(cleanup_uint256(expr_234, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_235 != U256::ZERO {
                    let expr_236 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551793_by_1_to_uint256(U256::from(0x100000000000000b1u128), context)?, context)?;
                    let _57 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_237 = shift_right_uint256_uint8(expr_236, _57, context)?;
                    var_result = expr_237;
                }
            }
            let expr_238 = and(var_x, convert_rational_255_by_1_to_uint256(U256::from(0xffu128), context)?, context)?;
            let expr_239 = gt(cleanup_uint256(expr_238, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
            if expr_239 != U256::ZERO {
                let expr_240 = and(var_x, convert_rational_128_by_1_to_uint256(U256::from(0x80u128), context)?, context)?;
                let expr_241 = gt(cleanup_uint256(expr_240, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_241 != U256::ZERO {
                    let expr_242 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551705_by_1_to_uint256(U256::from(0x10000000000000059u128), context)?, context)?;
                    let _58 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
                    let expr_243 = shift_right_uint256_uint8(expr_242, _58, context)?;
                    var_result = expr_243;
                }
                let expr_244 = U256::from(0x40u128);
                let expr_245 = and(var_x, convert_rational_64_by_1_to_uint256(expr_244, context)?, context)?;
                let expr_246 = gt(cleanup_uint256(expr_245, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_246 != U256::ZERO {
                    let expr_247 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551660_by_1_to_uint256(U256::from(0x1000000000000002cu128), context)?, context)?;
                    let _59 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_248 = shift_right_uint256_uint8(expr_247, _59, context)?;
                    var_result = expr_248;
                }
                let expr_249 = and(var_x, convert_rational_32_by_1_to_uint256(U256::from(0x20u128), context)?, context)?;
                let expr_250 = gt(cleanup_uint256(expr_249, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_250 != U256::ZERO {
                    let expr_251 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551638_by_1_to_uint256(U256::from(0x10000000000000016u128), context)?, context)?;
                    let _60 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_252 = shift_right_uint256_uint8(expr_251, _60, context)?;
                    var_result = expr_252;
                }
                let expr_253 = and(var_x, convert_rational_16_by_1_to_uint256(U256::from(0x10u128), context)?, context)?;
                let expr_254 = gt(cleanup_uint256(expr_253, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_254 != U256::ZERO {
                    let expr_255 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551627_by_1_to_uint256(U256::from(0x1000000000000000bu128), context)?, context)?;
                    let _61 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_256 = shift_right_uint256_uint8(expr_255, _61, context)?;
                    var_result = expr_256;
                }
                let expr_257 = and(var_x, convert_rational_8_by_1_to_uint256(U256::from(0x8u128), context)?, context)?;
                let expr_258 = gt(cleanup_uint256(expr_257, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_258 != U256::ZERO {
                    let expr_259 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551622_by_1_to_uint256(U256::from(0x10000000000000006u128), context)?, context)?;
                    let _62 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_260 = shift_right_uint256_uint8(expr_259, _62, context)?;
                    var_result = expr_260;
                }
                let expr_261 = and(var_x, convert_rational_4_by_1_to_uint256(U256::from(0x4u128), context)?, context)?;
                let expr_262 = gt(cleanup_uint256(expr_261, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_262 != U256::ZERO {
                    let expr_263 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551619_by_1_to_uint256(U256::from(0x10000000000000003u128), context)?, context)?;
                    let _63 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_264 = shift_right_uint256_uint8(expr_263, _63, context)?;
                    var_result = expr_264;
                }
                let expr_265 = and(var_x, convert_rational_2_by_1_to_uint256(U256::from(0x2u128), context)?, context)?;
                let expr_266 = gt(cleanup_uint256(expr_265, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_266 != U256::ZERO {
                    let expr_267 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551617_by_1_to_uint256(U256::from(0x10000000000000001u128), context)?, context)?;
                    let _64 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_268 = shift_right_uint256_uint8(expr_267, _64, context)?;
                    var_result = expr_268;
                }
                let expr_269 = and(var_x, convert_rational_1_by_1_to_uint256(U256::from(0x1u128), context)?, context)?;
                let expr_270 = gt(cleanup_uint256(expr_269, context)?, convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?, context)?;
                if expr_270 != U256::ZERO {
                    let expr_271 = wrapping_mul_uint256(var_result, convert_rational_18446744073709551617_by_1_to_uint256(U256::from(0x10000000000000001u128), context)?, context)?;
                    let _65 = convert_rational_by_to_uint8(expr_244, context)?;
                    let expr_272 = shift_right_uint256_uint8(expr_271, _65, context)?;
                    var_result = expr_272;
                }
            }
            let expr_273 = constant_UNIT_2209(context)?;
            let expr_274 = wrapping_mul_uint256(var_result, expr_273, context)?;
            var_result = expr_274;
            let _66 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
            let expr_275 = shift_right_uint256_uint8(var_x, _66, context)?;
            let expr_276 = wrapping_sub_uint256(convert_rational_191_by_1_to_uint256(U256::from(0xbfu128), context)?, expr_275, context)?;
            let expr_277 = shift_right_uint256_uint256(expr_274, expr_276, context)?;
            var_result = expr_277;
            Ok(var_result)
        }

        pub fn fun_unwrap<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_uint256 = zero_value_for_split_uint256(context)?;
            var_result = zero_uint256;
            let expr = convert_uint256_to_uint256(var_x, context)?;
            var_result = expr;
            Ok(var_result)
        }

        pub fn fun_wrap<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_userDefinedValueType_UD60x18 = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            var_result = zero_userDefinedValueType_UD60x18;
            let expr = convert_uint256_to_uint256(var_x, context)?;
            var_result = expr;
            Ok(var_result)
        }

        pub fn shift_left_uint256_uint8<CI>(value: U256, mut bits: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut result = U256::ZERO;
            bits = cleanup_uint8(bits, context)?;
            result = cleanup_uint256(shift_left_dynamic(bits, cleanup_uint256(value, context)?, context)?, context)?;
            Ok(result)
        }

        pub fn fun_exp2_1100<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_userDefinedValueType_UD60x18 = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            var_result = zero_userDefinedValueType_UD60x18;
            let expr = fun_unwrap(var_x, context)?;
            let expr_1 = constant_uEXP2_MAX_INPUT(context)?;
            let expr_2 = gt(cleanup_uint256(expr, context)?, cleanup_uint256(expr_1, context)?, context)?;
            if expr_2 != U256::ZERO {
                mstore(U256::from(0x0u128), shl(U256::from(0xe0u128), U256::from(0xb3b6ba1fu128), context)?, context)?;
                let _1 = abi_encode_userDefinedValueType_UD60x18(add(U256::from(0x0u128), U256::from(0x4u128), context)?, var_x, context)?;
                revert(U256::from(0x0u128), sub(_1, U256::from(0x0u128), context)?, context)?;
            }
            let _2 = convert_rational_by_to_uint8(U256::from(0x40u128), context)?;
            let expr_3 = shift_left_uint256_uint8(expr, _2, context)?;
            let expr_4 = constant_uUNIT(context)?;
            let expr_5 = checked_div_uint256(expr_3, expr_4, context)?;
            let expr_6 = fun_exp2(expr_5, context)?;
            let expr_7 = fun_wrap(expr_6, context)?;
            var_result = expr_7;
            Ok(var_result)
        }

        pub fn wrapping_div_uint256<CI>(mut x: U256, mut y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut r = U256::ZERO;
            x = cleanup_uint256(x, context)?;
            y = cleanup_uint256(y, context)?;
            if iszero(y, context)? != U256::ZERO {
                panic_error_0x12(context)?;
            }
            r = div(x, y, context)?;
            Ok(r)
        }

        pub fn fun_exp<CI>(var_x: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_userDefinedValueType_UD60x18 = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            var_result = zero_userDefinedValueType_UD60x18;
            let expr = fun_unwrap(var_x, context)?;
            let expr_1 = constant_uEXP_MAX_INPUT(context)?;
            let expr_2 = gt(cleanup_uint256(expr, context)?, cleanup_uint256(expr_1, context)?, context)?;
            if expr_2 != U256::ZERO {
                mstore(U256::from(0x0u128), shl(U256::from(0xe1u128), U256::from(0xd7b1d65u128), context)?, context)?;
                let _1 = abi_encode_userDefinedValueType_UD60x18(add(U256::from(0x0u128), U256::from(0x4u128), context)?, var_x, context)?;
                revert(U256::from(0x0u128), sub(_1, U256::from(0x0u128), context)?, context)?;
            }
            let expr_3 = constant_uLOG2_E(context)?;
            let expr_4 = wrapping_mul_uint256(expr, expr_3, context)?;
            let expr_5 = constant_uUNIT(context)?;
            let expr_6 = wrapping_div_uint256(expr_4, expr_5, context)?;
            let expr_7 = fun_wrap(expr_6, context)?;
            let expr_8 = fun_exp2_1100(expr_7, context)?;
            var_result = expr_8;
            Ok(var_result)
        }

        pub fn fun_test_Exp_inner<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let _1 = read_from_storage_split_offset_userDefinedValueType_UD60x18(add(U256::from(0xcu128), U256::from(0x0u128), context)?, context)?;
            let expr = fun_exp(_1, context)?;
            let _2 = read_from_storage_split_offset_userDefinedValueType_UD60x18(add(U256::from(0xcu128), U256::from(0x2u128), context)?, context)?;
            let _40_mpos = convert_stringliteral_c4d8_to_string(context)?;
            fun_assertEq(expr, _2, _40_mpos, context)?;
            Ok(())
        }

        pub fn modifier_whenLteMaxPermitted<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            fun_test_Exp_inner(context)?;
            Ok(())
        }

        pub fn modifier_whenNotZero<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            modifier_whenLteMaxPermitted(context)?;
            Ok(())
        }

        pub fn update_storage_value_offsett_struct_Set_to_struct_Set<CI>(slot: U256, value: U256, context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            copy_struct_to_storage_from_struct_Set_to_struct_Set(slot, value, context)?;
            Ok(())
        }

        pub fn wrapping_add_uint256<CI>(x: U256, y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut sum = U256::ZERO;
            sum = cleanup_uint256(add(x, y, context)?, context)?;
            Ok(sum)
        }

        pub fn modifier_parameterizedTest<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let expr_245_mpos = fun_exp_Sets(context)?;
            let expr = array_length_array_struct_Set_dyn(expr_245_mpos, context)?;
            let mut var_i = convert_rational_0_by_1_to_uint256(U256::from(0x0u128), context)?;
            // for loop
            while U256::from(0x1u128) != U256::ZERO {
                // body
                {
                    let expr_1 = lt(cleanup_uint256(var_i, context)?, cleanup_uint256(expr, context)?, context)?;
                    if iszero(expr_1, context)? != U256::ZERO {
                        break;
                    }
                    let _29_mpos = mload(memory_array_index_access_struct_Set_dyn(expr_245_mpos, var_i, context)?, context)?;
                    update_storage_value_offsett_struct_Set_to_struct_Set(U256::from(0xcu128), _29_mpos, context)?;
                    modifier_whenNotZero(context)?;
                    let _1 = convert_rational_1_by_1_to_uint256(U256::from(0x1u128), context)?;
                    let expr_2 = wrapping_add_uint256(var_i, _1, context)?;
                    var_i = expr_2;
                }
                // post
                {

                }
            }
            Ok(())
        }

        pub fn fun_test_Exp<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            modifier_parameterizedTest(context)?;
            Ok(())
        }

        pub fn external_fun_test_Exp<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if callvalue(context)? != U256::ZERO {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
            }
            abi_decode(U256::from(0x4u128), calldatasize(context)?, context)?;
            fun_test_Exp(context)?;
            let memPos = allocate_unbounded(context)?;
            let memEnd = abi_encode_tuple(memPos, context)?;
            return_(memPos, sub(memEnd, memPos, context)?, context)?;
            Ok(())
        }

        pub fn fun_test_Exp_Zero<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let expr = constant_ZERO(context)?;
            let expr_1 = fun_exp(expr, context)?;
            let expr_2 = constant_UNIT(context)?;
            let _22_mpos = convert_stringliteral_c4d8_to_string(context)?;
            fun_assertEq(expr_1, expr_2, _22_mpos, context)?;
            Ok(())
        }

        pub fn external_fun_test_Exp_Zero<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if callvalue(context)? != U256::ZERO {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
            }
            abi_decode(U256::from(0x4u128), calldatasize(context)?, context)?;
            fun_test_Exp_Zero(context)?;
            let memPos = allocate_unbounded(context)?;
            let memEnd = abi_encode_tuple(memPos, context)?;
            return_(memPos, sub(memEnd, memPos, context)?, context)?;
            Ok(())
        }

        pub fn fun_add<CI>(var_x: U256, var_y: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut var_result = U256::ZERO;
            let zero_userDefinedValueType_UD60x18 = zero_value_for_split_userDefinedValueType_UD60x18(context)?;
            var_result = zero_userDefinedValueType_UD60x18;
            let expr = fun_unwrap(var_x, context)?;
            let expr_1 = fun_unwrap(var_y, context)?;
            let expr_2 = checked_add_uint256(expr, expr_1, context)?;
            let expr_3 = fun_wrap(expr_2, context)?;
            var_result = expr_3;
            Ok(var_result)
        }

        pub fn fun_test_RevertWhen_GtMaxPermitted_inner<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            let expr = constant_EXP_MAX_INPUT(context)?;
            let _1 = convert_rational_1_by_1_to_uint256(U256::from(0x1u128), context)?;
            let expr_1 = fun_ud(_1, context)?;
            let expr_2 = fun_add(expr, expr_1, context)?;
            let expr_64_address = constant_vm_13027(context)?;
            let expr_66_address = convert_contract_Vm_to_address(expr_64_address, context)?;
            let expr_72_mpos = allocate_unbounded(context)?;
            let mut _2 = add(expr_72_mpos, U256::from(0x20u128), context)?;
            mstore(_2, shl(U256::from(0xe1u128), U256::from(0xd7b1d65u128), context)?, context)?;
            _2 = add(_2, U256::from(0x4u128), context)?;
            let _3 = abi_encode_userDefinedValueType_UD60x18(_2, expr_2, context)?;
            mstore(expr_72_mpos, sub(_3, add(expr_72_mpos, U256::from(0x20u128), context)?, context)?, context)?;
            finalize_allocation(expr_72_mpos, sub(_3, expr_72_mpos, context)?, context)?;
            if iszero(extcodesize(expr_66_address, context)?, context)? != U256::ZERO {
                revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20(context)?;
            }
            let _4 = allocate_unbounded(context)?;
            mstore(_4, shift_left_224(U256::from(0xf28dceb3u128), context)?, context)?;
            let _5 = abi_encode_bytes(add(_4, U256::from(0x4u128), context)?, expr_72_mpos, context)?;
            let _6 = call(gas(context)?, expr_66_address, U256::from(0x0u128), _4, sub(_5, _4, context)?, _4, U256::from(0x0u128), context)?;
            if iszero(_6, context)? != U256::ZERO {
                revert_forward(context)?;
            }
            if _6 != U256::ZERO {
                let mut _7 = U256::from(0x0u128);
                if gt(U256::from(0x0u128), returndatasize(context)?, context)? != U256::ZERO {
                    _7 = returndatasize(context)?;
                }
                finalize_allocation(_4, _7, context)?;
                abi_decode_fromMemory(_4, add(_4, _7, context)?, context)?;
            }
            pop(fun_exp(expr_2, context)?, context)?;
            Ok(())
        }

        pub fn modifier_whenNotZero_53<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            fun_test_RevertWhen_GtMaxPermitted_inner(context)?;
            Ok(())
        }

        pub fn fun_test_RevertWhen_GtMaxPermitted<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            modifier_whenNotZero_53(context)?;
            Ok(())
        }

        pub fn external_fun_test_RevertWhen_GtMaxPermitted<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            if callvalue(context)? != U256::ZERO {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb(context)?;
            }
            abi_decode(U256::from(0x4u128), calldatasize(context)?, context)?;
            fun_test_RevertWhen_GtMaxPermitted(context)?;
            let memPos = allocate_unbounded(context)?;
            let memEnd = abi_encode_tuple(memPos, context)?;
            return_(memPos, sub(memEnd, memPos, context)?, context)?;
            Ok(())
        }

        pub fn revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            revert(U256::from(0x0u128), U256::from(0x0u128), context)?;
            Ok(())
        }

        pub fn shift_right_unsigned<CI>(value: U256, context: &mut Context<CI>) -> YulOutput<U256>
        where
            Context<CI>: ContractInteractions,
        {
            let mut newValue = U256::ZERO;
            newValue = shr(U256::from(0xe0u128), value, context)?;
            Ok(newValue)
        }

        pub fn body<CI>(context: &mut Context<CI>) -> YulOutput<()>
        where
            Context<CI>: ContractInteractions,
        {
            mstore(U256::from(0x40u128), memoryguard(U256::from(0x80u128), context)?, context)?;
            if iszero(lt(calldatasize(context)?, U256::from(0x4u128), context)?, context)? != U256::ZERO {
                let selector = shift_right_unsigned(calldataload(U256::from(0x0u128), context)?, context)?;
                // switch
                let δ = selector;
                if δ == U256::from(0xa9254e4u128) {
                    external_fun_setUp(context)?;
                } else if δ == U256::from(0x3b09c0d4u128) {
                    external_fun_test_Exp_Zero(context)?;
                } else if δ == U256::from(0x94e8adfbu128) {
                    external_fun_test_Exp(context)?;
                } else if δ == U256::from(0xba414fa6u128) {
                    external_fun_failed(context)?;
                } else if δ == U256::from(0xd7e3b0d5u128) {
                    external_fun_test_RevertWhen_GtMaxPermitted(context)?;
                }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74(context)?;
            Ok(())
        }
    }
}

fn main() {
    let mut context = Context {
        contract_interactions: std::marker::PhantomData::<DummyContractInteractions>,
        memory: Memory::new(),
        immutables: std::collections::HashMap::new(),
        storage: std::collections::HashMap::new(),
        address: U256::from(123),
        caller: U256::from(124),
        callvalue: U256::from(12),
        gas: U256::from(100 * 1000),
        timestamp: U256::from(1000 * 1000),
        calldata: vec![],
        chain_id: U256::from(123456),
    };

    let result = exp_unit_test::exp_unit_test_deployed::fun_test_Exp(&mut context);
    println!("result: {:#?}", result);
    println!("context: {:#?}", context);
}
