// Generated by Oxidefier
mod i256;
#[macro_use]
mod macros;
mod opcode;

mod erc20_403 {
    use alloy_primitives::U256;
    use crate::opcode::*;

    fn checked_add_uint256(x: U256, memory: &mut Memory) -> YulOutput<U256> {
        let mut sum = U256::from(0);
        sum = add(x, from_hex("14"), memory)?;
        if gt(x, sum, memory)? != U256::from(0) {
            mstore(from_hex("0"), shl(from_hex("e0"), from_hex("4e487b71"), memory)?, memory)?;
            mstore(from_hex("4"), from_hex("11"), memory)?;
            revert(from_hex("0"), from_hex("24"), memory)?;
        }
        Ok(sum)
    }

    fn body(memory: &mut Memory) -> YulOutput<()> {
        let mut _1 = memoryguard(from_hex("80"), memory)?;
        mstore(from_hex("40"), _1, memory)?;
        if callvalue(memory)? != U256::from(0) {
            revert(from_hex("0"), from_hex("0"), memory)?;
        }
        if iszero(caller(memory)?, memory)? != U256::from(0) {
            mstore(_1, shl(from_hex("e5"), from_hex("461bcd"), memory)?, memory)?;
            mstore(add(_1, from_hex("4"), memory)?, from_hex("20"), memory)?;
            mstore(add(_1, from_hex("24"), memory)?, from_hex("1f"), memory)?;
            mstore(add(_1, from_hex("44"), memory)?, from_hex("45726332303a206d696e7420746f20746865207a65726f206164647265737300"), memory)?;
            revert(_1, from_hex("64"), memory)?;
        }
        sstore(from_hex("02"), checked_add_uint256(sload(from_hex("02"), memory)?, memory)?, memory)?;
        mstore(from_hex("00"), caller(memory)?, memory)?;
        mstore(from_hex("20"), from_hex("00"), memory)?;
        let mut _2 = checked_add_uint256(sload(keccak256(from_hex("00"), from_hex("40"), memory)?, memory)?, memory)?;
        mstore(from_hex("00"), caller(memory)?, memory)?;
        mstore(from_hex("20"), from_hex("00"), memory)?;
        sstore(keccak256(from_hex("00"), from_hex("40"), memory)?, _2, memory)?;
        let mut _3 = mload(from_hex("40"), memory)?;
        mstore(_3, from_hex("14"), memory)?;
        log3(_3, from_hex("20"), from_hex("ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"), from_hex("00"), caller(memory)?, memory)?;
        let mut _4 = mload(from_hex("40"), memory)?;
        let mut _5 = datasize(from_hex("45726332305f3430335f6465706c6f7965640000000000000000000000000000"), memory)?;
        codecopy(_4, dataoffset(from_hex("45726332305f3430335f6465706c6f7965640000000000000000000000000000"), memory)?, _5, memory)?;
        return_(_4, _5, memory)?;
        Ok(())
    }

    mod erc20_403_deployed {
        use alloy_primitives::U256;
        use crate::opcode::*;

        fn abi_decode_address(memory: &mut Memory) -> YulOutput<U256> {
            let mut value = U256::from(0);
            value = calldataload(from_hex("4"), memory)?;
            if iszero(eq(value, and(value, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?, memory)? != U256::from(0) {
                revert(from_hex("0"), from_hex("0"), memory)?;
            }
            Ok(value)
        }

        fn abi_decode_t_address(memory: &mut Memory) -> YulOutput<U256> {
            let mut value = U256::from(0);
            value = calldataload(from_hex("24"), memory)?;
            if iszero(eq(value, and(value, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?, memory)? != U256::from(0) {
                revert(from_hex("0"), from_hex("0"), memory)?;
            }
            Ok(value)
        }

        fn checked_add_uint256(x: U256, y: U256, memory: &mut Memory) -> YulOutput<U256> {
            let mut sum = U256::from(0);
            sum = add(x, y, memory)?;
            if gt(x, sum, memory)? != U256::from(0) {
                mstore(from_hex("0"), shl(from_hex("e0"), from_hex("4e487b71"), memory)?, memory)?;
                mstore(from_hex("4"), from_hex("11"), memory)?;
                revert(from_hex("0"), from_hex("24"), memory)?;
            }
            Ok(sum)
        }

        fn checked_sub_uint256(x: U256, y: U256, memory: &mut Memory) -> YulOutput<U256> {
            let mut diff = U256::from(0);
            diff = sub(x, y, memory)?;
            if gt(diff, x, memory)? != U256::from(0) {
                mstore(from_hex("0"), shl(from_hex("e0"), from_hex("4e487b71"), memory)?, memory)?;
                mstore(from_hex("4"), from_hex("11"), memory)?;
                revert(from_hex("0"), from_hex("24"), memory)?;
            }
            Ok(diff)
        }

        fn fun_approve(var_owner: U256, var_spender: U256, var_value: U256, memory: &mut Memory) -> YulOutput<()> {
            let mut _1 = and(var_owner, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?;
            if iszero(_1, memory)? != U256::from(0) {
                let mut memPtr = mload(from_hex("40"), memory)?;
                mstore(memPtr, shl(from_hex("e5"), from_hex("461bcd"), memory)?, memory)?;
                mstore(add(memPtr, from_hex("4"), memory)?, from_hex("20"), memory)?;
                mstore(add(memPtr, from_hex("24"), memory)?, from_hex("24"), memory)?;
                mstore(add(memPtr, from_hex("44"), memory)?, from_hex("45726332303a20617070726f76652066726f6d20746865207a65726f20616464"), memory)?;
                mstore(add(memPtr, from_hex("64"), memory)?, from_hex("7265737300000000000000000000000000000000000000000000000000000000"), memory)?;
                revert(memPtr, from_hex("84"), memory)?;
            }
            let mut _2 = and(var_spender, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?;
            if iszero(_2, memory)? != U256::from(0) {
                let mut memPtr_1 = mload(from_hex("40"), memory)?;
                mstore(memPtr_1, shl(from_hex("e5"), from_hex("461bcd"), memory)?, memory)?;
                mstore(add(memPtr_1, from_hex("4"), memory)?, from_hex("20"), memory)?;
                mstore(add(memPtr_1, from_hex("24"), memory)?, from_hex("22"), memory)?;
                mstore(add(memPtr_1, from_hex("44"), memory)?, from_hex("45726332303a20617070726f766520746f20746865207a65726f206164647265"), memory)?;
                mstore(add(memPtr_1, from_hex("64"), memory)?, from_hex("7373000000000000000000000000000000000000000000000000000000000000"), memory)?;
                revert(memPtr_1, from_hex("84"), memory)?;
            }
            mstore(from_hex("00"), _1, memory)?;
            mstore(from_hex("20"), from_hex("01"), memory)?;
            let mut dataSlot = keccak256(from_hex("00"), from_hex("40"), memory)?;
            let mut dataSlot_1 = from_hex("0");
            mstore(from_hex("0"), _2, memory)?;
            mstore(from_hex("20"), dataSlot, memory)?;
            dataSlot_1 = keccak256(from_hex("0"), from_hex("40"), memory)?;
            sstore(dataSlot_1, var_value, memory)?;
            let mut _3 = mload(from_hex("40"), memory)?;
            mstore(_3, var_value, memory)?;
            log3(_3, from_hex("20"), from_hex("8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"), _1, _2, memory)?;
            Ok(())
        }

        fn fun_transfer(var_from: U256, var_to: U256, var_value: U256, memory: &mut Memory) -> YulOutput<()> {
            let mut _1 = and(var_to, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?;
            if iszero(_1, memory)? != U256::from(0) {
                let mut memPtr = mload(from_hex("40"), memory)?;
                mstore(memPtr, shl(from_hex("e5"), from_hex("461bcd"), memory)?, memory)?;
                mstore(add(memPtr, from_hex("4"), memory)?, from_hex("20"), memory)?;
                mstore(add(memPtr, from_hex("24"), memory)?, from_hex("23"), memory)?;
                mstore(add(memPtr, from_hex("44"), memory)?, from_hex("45726332303a207472616e7366657220746f20746865207a65726f2061646472"), memory)?;
                mstore(add(memPtr, from_hex("64"), memory)?, from_hex("6573730000000000000000000000000000000000000000000000000000000000"), memory)?;
                revert(memPtr, from_hex("84"), memory)?;
            }
            let mut _2 = and(var_from, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?;
            mstore(from_hex("00"), _2, memory)?;
            mstore(from_hex("20"), from_hex("00"), memory)?;
            let mut _3 = checked_sub_uint256(sload(keccak256(from_hex("00"), from_hex("40"), memory)?, memory)?, var_value, memory)?;
            mstore(from_hex("00"), _2, memory)?;
            mstore(from_hex("20"), from_hex("00"), memory)?;
            sstore(keccak256(from_hex("00"), from_hex("40"), memory)?, _3, memory)?;
            mstore(from_hex("00"), _1, memory)?;
            mstore(from_hex("20"), from_hex("00"), memory)?;
            let mut _4 = checked_add_uint256(sload(keccak256(from_hex("00"), from_hex("40"), memory)?, memory)?, var_value, memory)?;
            mstore(from_hex("00"), _1, memory)?;
            mstore(from_hex("20"), from_hex("00"), memory)?;
            sstore(keccak256(from_hex("00"), from_hex("40"), memory)?, _4, memory)?;
            let mut _5 = mload(from_hex("40"), memory)?;
            mstore(_5, var_value, memory)?;
            log3(_5, from_hex("20"), from_hex("ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"), _2, _1, memory)?;
            Ok(())
        }

        fn body(memory: &mut Memory) -> YulOutput<()> {
            mstore(from_hex("40"), memoryguard(from_hex("80"), memory)?, memory)?;
            if iszero(lt(calldatasize(memory)?, from_hex("4"), memory)?, memory)? != U256::from(0) {
                // switch
                let δ = shr(from_hex("e0"), calldataload(from_hex("0"), memory)?, memory)?;
                if δ == from_hex("095ea7b3") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("40"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0 = abi_decode_address(memory)?;
                    fun_approve(caller(memory)?, value0, calldataload(from_hex("24"), memory)?, memory)?;
                    let mut memPos = mload(from_hex("40"), memory)?;
                    mstore(memPos, from_hex("1"), memory)?;
                    return_(memPos, from_hex("20"), memory)?;
                } else if δ == from_hex("18160ddd") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("0"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut _1 = sload(from_hex("02"), memory)?;
                    let mut memPos_1 = mload(from_hex("40"), memory)?;
                    mstore(memPos_1, _1, memory)?;
                    return_(memPos_1, from_hex("20"), memory)?;
                } else if δ == from_hex("23b872dd") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("60"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0_1 = abi_decode_address(memory)?;
                    let mut value1 = abi_decode_t_address(memory)?;
                    let mut value = calldataload(from_hex("44"), memory)?;
                    fun_transfer(value0_1, value1, value, memory)?;
                    mstore(from_hex("0"), and(value0_1, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), from_hex("1"), memory)?;
                    let mut dataSlot = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    let mut dataSlot_1 = from_hex("0");
                    mstore(from_hex("0"), and(caller(memory)?, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), dataSlot, memory)?;
                    dataSlot_1 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    fun_approve(value0_1, caller(memory)?, checked_sub_uint256(sload(dataSlot_1, memory)?, value, memory)?, memory)?;
                    let mut memPos_2 = mload(from_hex("40"), memory)?;
                    mstore(memPos_2, from_hex("1"), memory)?;
                    return_(memPos_2, from_hex("20"), memory)?;
                } else if δ == from_hex("39509351") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("40"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0_2 = abi_decode_address(memory)?;
                    mstore(from_hex("0"), caller(memory)?, memory)?;
                    mstore(from_hex("20"), from_hex("1"), memory)?;
                    let mut dataSlot_2 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    let mut dataSlot_3 = from_hex("0");
                    mstore(from_hex("0"), and(value0_2, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), dataSlot_2, memory)?;
                    dataSlot_3 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    fun_approve(caller(memory)?, value0_2, checked_add_uint256(sload(dataSlot_3, memory)?, calldataload(from_hex("24"), memory)?, memory)?, memory)?;
                    let mut memPos_3 = mload(from_hex("40"), memory)?;
                    mstore(memPos_3, from_hex("1"), memory)?;
                    return_(memPos_3, from_hex("20"), memory)?;
                } else if δ == from_hex("70a08231") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("20"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    mstore(from_hex("0"), and(abi_decode_address(memory)?, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), from_hex("0"), memory)?;
                    let mut _2 = sload(keccak256(from_hex("0"), from_hex("40"), memory)?, memory)?;
                    let mut memPos_4 = mload(from_hex("40"), memory)?;
                    mstore(memPos_4, _2, memory)?;
                    return_(memPos_4, from_hex("20"), memory)?;
                } else if δ == from_hex("a457c2d7") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("40"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0_3 = abi_decode_address(memory)?;
                    mstore(from_hex("0"), caller(memory)?, memory)?;
                    mstore(from_hex("20"), from_hex("1"), memory)?;
                    let mut dataSlot_4 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    let mut dataSlot_5 = from_hex("0");
                    mstore(from_hex("0"), and(value0_3, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), dataSlot_4, memory)?;
                    dataSlot_5 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    fun_approve(caller(memory)?, value0_3, checked_sub_uint256(sload(dataSlot_5, memory)?, calldataload(from_hex("24"), memory)?, memory)?, memory)?;
                    let mut memPos_5 = mload(from_hex("40"), memory)?;
                    mstore(memPos_5, from_hex("1"), memory)?;
                    return_(memPos_5, from_hex("20"), memory)?;
                } else if δ == from_hex("a9059cbb") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("40"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0_4 = abi_decode_address(memory)?;
                    fun_transfer(caller(memory)?, value0_4, calldataload(from_hex("24"), memory)?, memory)?;
                    let mut memPos_6 = mload(from_hex("40"), memory)?;
                    mstore(memPos_6, from_hex("1"), memory)?;
                    return_(memPos_6, from_hex("20"), memory)?;
                } else if δ == from_hex("dd62ed3e") {
                    if callvalue(memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    if slt(add(calldatasize(memory)?, not(from_hex("3"), memory)?, memory)?, from_hex("40"), memory)? != U256::from(0) {
                        revert(from_hex("0"), from_hex("0"), memory)?;
                    }
                    let mut value0_5 = abi_decode_address(memory)?;
                    let mut value1_1 = abi_decode_t_address(memory)?;
                    mstore(from_hex("0"), and(value0_5, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), from_hex("01"), memory)?;
                    let mut dataSlot_6 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    let mut dataSlot_7 = from_hex("0");
                    mstore(from_hex("0"), and(value1_1, sub(shl(from_hex("a0"), from_hex("1"), memory)?, from_hex("1"), memory)?, memory)?, memory)?;
                    mstore(from_hex("20"), dataSlot_6, memory)?;
                    dataSlot_7 = keccak256(from_hex("0"), from_hex("40"), memory)?;
                    let mut _3 = sload(dataSlot_7, memory)?;
                    let mut memPos_7 = mload(from_hex("40"), memory)?;
                    mstore(memPos_7, _3, memory)?;
                    return_(memPos_7, from_hex("20"), memory)?;
                }
            }
            revert(from_hex("0"), from_hex("0"), memory)?;
            Ok(())
        }
    }
}

fn main() {}
